{"ast":null,"code":"// import React, { useState } from 'react';\n// import 'C:/Users/Asus ZenBook 14/Desktop/My-github/Invoice Project/src/css/Table.css'; // Import custom CSS file for styling\n\n// const TableWithData = ({ data, itemsPerPage }) => {\n//   const [currentPage, setCurrentPage] = useState(1);\n// const [selectedRow, setSelectedRow] = useState(null);\n\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\n\n//   const handleChangePage = (page) => {\n//     setCurrentPage(page);\n//   };\n\n//   const handleShowModal = (rowData) => {\n//     setSelectedRow(rowData);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedRow(null);\n//   };\n\n//   const handleDeleteRow = () => {\n\n//   };\n\n//   const renderTableData = () => {\n//     const startIndex = (currentPage - 1) * itemsPerPage;\n//     const endIndex = startIndex + itemsPerPage;\n//     return data.slice(startIndex, endIndex).map((item, index) => (\n//       <tr key={startIndex + index}>\n//         <td>{item.column1}</td>\n//         <td>{item.column2}</td>\n//         <td>{item.column3}</td>\n//         <td>{item.column4}</td>\n//         <td>{item.column5}</td>\n//         <td>\n//           <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\n//         </td>\n//       </tr>\n//     ));\n//   };\n\n//   const renderPagination = () => {\n//     const pages = [];\n//     const maxPagesToShow = 5;\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\n\n//     for (let i = startPage; i <= endPage; i++) {\n//       pages.push(\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\n//         </li>\n//       );\n//     }\n\n//     const previousButton = (\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\n//       </li>\n//     );\n\n//     const nextButton = (\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\n//       </li>\n//     );\n\n//     return (\n//       <nav>\n//         <ul className=\"pagination\">\n//           {previousButton}\n//           {pages}\n//           {nextButton}\n//         </ul>\n//       </nav>\n//     );\n//   };\n\n//   const renderModal = () => {\n//     if (!selectedRow) return null;\n\n//     return (\n//     <div className=\"modal\">\n//       <div className=\"modal-content\">\n//         <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n// <h2>Details</h2>\n// <div className='modal-items'>\n//   <div className=\"modal-item\">\n//     <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//   </div>\n// </div>\n//         <div className='modal-delete' >\n//           <center>\n//             <button onClick={handleDeleteRow}> Supprimer</button>\n//           </center>\n\n//         </div>\n//       </div>\n//     </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"table-container\">\n//       <table className=\"table\">\n// <thead className=\"thead-dark\">\n//   <tr>\n//     <th>Nº de Facture</th>\n//     <th>Nom Client</th>\n//     <th>Nº Bon de livraison</th>\n//     <th>Type de validation</th>\n//     <th>Mode de Règlement</th>\n//     <th>Action</th>\n//   </tr>\n// </thead>\n// <tbody>\n//   {renderTableData()}\n// </tbody>\n//       </table>\n//       {renderPagination()}\n//       {renderModal()}\n//     </div>\n//   );\n// };\n\n// export default TableWithData;\n\n// import React, { useState } from 'react';\n\n// const Table = ({ data, itemsPerPage }) => {\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [selectedRow, setSelectedRow] = useState(null);\n//   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\n\n//   const handleChangePage = (page) => {\n//     setCurrentPage(page);\n//   };\n\n//   const handleShowModal = (rowData) => {\n//     setSelectedRow(rowData);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedRow(null);\n//     setIsDeleteModalOpen(false);  // Fermer également le modal de suppression si ouvert\n//   };\n\n//   const handleDeleteRow = (rowData) => {\n//     setSelectedRow(rowData); // Définir la ligne à supprimer\n//     setIsDeleteModalOpen(true); // Ouvrir le modal de confirmation\n//   };\n\n//   const confirmDelete = () => {\n//     console.log(\"Suppression de la ligne:\", selectedRow); // Logique de suppression ici\n//     setIsDeleteModalOpen(false);\n//     setSelectedRow(null);\n//     // TODO: Supprimer la ligne de la base de données ou de la source de données\n//   };\n\n//     const renderPagination = () => {\n//     const pages = [];\n//     const maxPagesToShow = 5;\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\n\n//     for (let i = startPage; i <= endPage; i++) {\n//       pages.push(\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\n//         </li>\n//       );\n//     }\n\n//     const previousButton = (\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\n//       </li>\n//     );\n\n//     const nextButton = (\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\n//       </li>\n//     );\n\n//     return (\n//       <nav>\n//         <ul className=\"pagination\">\n//           {previousButton}\n//           {pages}\n//           {nextButton}\n//         </ul>\n//       </nav>\n//     );\n//   };\n\n//   // Render des lignes de la table avec pagination\n//   const renderTableData = () => {\n//     const startIndex = (currentPage - 1) * itemsPerPage;\n//     const endIndex = startIndex + itemsPerPage;\n//     return data.slice(startIndex, endIndex).map((item, index) => (\n//       <tr key={startIndex + index}>\n//         <td>{item.column1}</td>\n//         <td>{item.column2}</td>\n//         <td>{item.column3}</td>\n//         <td>{item.column4}</td>\n//         <td>{item.column5}</td>\n//         <td>\n//           <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\n//         </td>\n//       </tr>\n//     ));\n//   };\n\n//   // Render du modal de détails\n//   const renderModal = () => {\n//     if (!selectedRow) return null;\n\n//     return (\n//       <div className=\"modal\">\n//         <div className=\"modal-content\">\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n//           <h2>Details</h2>\n//         <div className='modal-items'>\n//           <div className=\"modal-item\">\n//             <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//           </div>\n//         </div>\n//           <div className=\"modal-delete\">\n//             <center>\n//             <button onClick={() => handleDeleteRow(selectedRow)}>Supprimer</button>\n//             </center>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   const renderDeleteConfirmationModal = () => {\n//     if (!isDeleteModalOpen) return null;\n\n//     return (\n//       <div className=\"modal-supprimer\">\n//         <div className=\"modal-content\">\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n//           <h2>Confirmer la suppression</h2>\n//           <p>Êtes-vous sûr de vouloir supprimer cet enregistrement : {selectedRow ? selectedRow.column2 : \"\"} ?</p>\n//           <button onClick={confirmDelete}>Confirmer</button>\n//           <button onClick={handleCloseModal}>Annuler</button>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"table-container\">\n//       <table className=\"table\">\n//       <thead className=\"thead-dark\">\n//           <tr>\n//             <th>Nº de Facture</th>\n//             <th>Nom Client</th>\n//             <th>Nº Bon de livraison</th>\n//             <th>Type de validation</th>\n//             <th>Mode de Règlement</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {renderTableData()}\n//         </tbody>\n//       </table>\n//       {renderPagination()}\n//       {renderModal()}\n//       {renderDeleteConfirmationModal()}\n//     </div>\n//   );\n// };\n\n// export default Table;","map":{"version":3,"names":[],"sources":["C:/Users/Asus ZenBook 14/Desktop/My-github/Invoice Project/src/Components/Visualiser/Table.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import 'C:/Users/Asus ZenBook 14/Desktop/My-github/Invoice Project/src/css/Table.css'; // Import custom CSS file for styling\r\n\r\n// const TableWithData = ({ data, itemsPerPage }) => {\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n// const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n//   const handleChangePage = (page) => {\r\n//     setCurrentPage(page);\r\n//   };\r\n\r\n//   const handleShowModal = (rowData) => {\r\n//     setSelectedRow(rowData);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setSelectedRow(null);\r\n//   };\r\n\r\n//   const handleDeleteRow = () => {\r\n\r\n//   };\r\n\r\n//   const renderTableData = () => {\r\n//     const startIndex = (currentPage - 1) * itemsPerPage;\r\n//     const endIndex = startIndex + itemsPerPage;\r\n//     return data.slice(startIndex, endIndex).map((item, index) => (\r\n//       <tr key={startIndex + index}>\r\n//         <td>{item.column1}</td>\r\n//         <td>{item.column2}</td>\r\n//         <td>{item.column3}</td>\r\n//         <td>{item.column4}</td>\r\n//         <td>{item.column5}</td>\r\n//         <td>\r\n//           <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\r\n//         </td>\r\n//       </tr>\r\n//     ));\r\n//   };\r\n\r\n//   const renderPagination = () => {\r\n//     const pages = [];\r\n//     const maxPagesToShow = 5;\r\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n//     for (let i = startPage; i <= endPage; i++) {\r\n//       pages.push(\r\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\r\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\r\n//         </li>\r\n//       );\r\n//     }\r\n\r\n//     const previousButton = (\r\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\r\n//       </li>\r\n//     );\r\n\r\n//     const nextButton = (\r\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\r\n//       </li>\r\n//     );\r\n\r\n//     return (\r\n//       <nav>\r\n//         <ul className=\"pagination\">\r\n//           {previousButton}\r\n//           {pages}\r\n//           {nextButton}\r\n//         </ul>\r\n//       </nav>\r\n//     );\r\n//   };\r\n  \r\n\r\n//   const renderModal = () => {\r\n//     if (!selectedRow) return null;\r\n\r\n//     return (\r\n//     <div className=\"modal\">\r\n//       <div className=\"modal-content\">\r\n//         <span className=\"close\" onClick={handleCloseModal}>&times;</span>\r\n        // <h2>Details</h2>\r\n        // <div className='modal-items'>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n        //   </div>\r\n        // </div>\r\n//         <div className='modal-delete' >\r\n//           <center>\r\n//             <button onClick={handleDeleteRow}> Supprimer</button>\r\n//           </center>\r\n          \r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"table-container\">\r\n//       <table className=\"table\">\r\n        // <thead className=\"thead-dark\">\r\n        //   <tr>\r\n        //     <th>Nº de Facture</th>\r\n        //     <th>Nom Client</th>\r\n        //     <th>Nº Bon de livraison</th>\r\n        //     <th>Type de validation</th>\r\n        //     <th>Mode de Règlement</th>\r\n        //     <th>Action</th>\r\n        //   </tr>\r\n        // </thead>\r\n        // <tbody>\r\n        //   {renderTableData()}\r\n        // </tbody>\r\n//       </table>\r\n//       {renderPagination()}\r\n//       {renderModal()}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TableWithData;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const Table = ({ data, itemsPerPage }) => {\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [selectedRow, setSelectedRow] = useState(null);\r\n//   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n\r\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n//   const handleChangePage = (page) => {\r\n//     setCurrentPage(page);\r\n//   };\r\n\r\n//   const handleShowModal = (rowData) => {\r\n//     setSelectedRow(rowData);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setSelectedRow(null);\r\n//     setIsDeleteModalOpen(false);  // Fermer également le modal de suppression si ouvert\r\n//   };\r\n\r\n//   const handleDeleteRow = (rowData) => {\r\n//     setSelectedRow(rowData); // Définir la ligne à supprimer\r\n//     setIsDeleteModalOpen(true); // Ouvrir le modal de confirmation\r\n//   };\r\n  \r\n\r\n//   const confirmDelete = () => {\r\n//     console.log(\"Suppression de la ligne:\", selectedRow); // Logique de suppression ici\r\n//     setIsDeleteModalOpen(false);\r\n//     setSelectedRow(null);\r\n//     // TODO: Supprimer la ligne de la base de données ou de la source de données\r\n//   };\r\n\r\n//     const renderPagination = () => {\r\n//     const pages = [];\r\n//     const maxPagesToShow = 5;\r\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n//     for (let i = startPage; i <= endPage; i++) {\r\n//       pages.push(\r\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\r\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\r\n//         </li>\r\n//       );\r\n//     }\r\n\r\n//     const previousButton = (\r\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\r\n//       </li>\r\n//     );\r\n\r\n//     const nextButton = (\r\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\r\n//       </li>\r\n//     );\r\n\r\n//     return (\r\n//       <nav>\r\n//         <ul className=\"pagination\">\r\n//           {previousButton}\r\n//           {pages}\r\n//           {nextButton}\r\n//         </ul>\r\n//       </nav>\r\n//     );\r\n//   };\r\n \r\n//   // Render des lignes de la table avec pagination\r\n//   const renderTableData = () => {\r\n//     const startIndex = (currentPage - 1) * itemsPerPage;\r\n//     const endIndex = startIndex + itemsPerPage;\r\n//     return data.slice(startIndex, endIndex).map((item, index) => (\r\n//       <tr key={startIndex + index}>\r\n//         <td>{item.column1}</td>\r\n//         <td>{item.column2}</td>\r\n//         <td>{item.column3}</td>\r\n//         <td>{item.column4}</td>\r\n//         <td>{item.column5}</td>\r\n//         <td>\r\n//           <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\r\n//         </td>\r\n//       </tr>\r\n//     ));\r\n//   };\r\n\r\n//   // Render du modal de détails\r\n//   const renderModal = () => {\r\n//     if (!selectedRow) return null;\r\n\r\n//     return (\r\n//       <div className=\"modal\">\r\n//         <div className=\"modal-content\">\r\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\r\n//           <h2>Details</h2>\r\n//         <div className='modal-items'>\r\n//           <div className=\"modal-item\">\r\n//             <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n//           </div>\r\n//         </div>\r\n//           <div className=\"modal-delete\">\r\n//             <center>\r\n//             <button onClick={() => handleDeleteRow(selectedRow)}>Supprimer</button>\r\n//             </center>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const renderDeleteConfirmationModal = () => {\r\n//     if (!isDeleteModalOpen) return null;\r\n  \r\n//     return (\r\n//       <div className=\"modal-supprimer\">\r\n//         <div className=\"modal-content\">\r\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\r\n//           <h2>Confirmer la suppression</h2>\r\n//           <p>Êtes-vous sûr de vouloir supprimer cet enregistrement : {selectedRow ? selectedRow.column2 : \"\"} ?</p>\r\n//           <button onClick={confirmDelete}>Confirmer</button>\r\n//           <button onClick={handleCloseModal}>Annuler</button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n  \r\n\r\n//   return (\r\n//     <div className=\"table-container\">\r\n//       <table className=\"table\">\r\n//       <thead className=\"thead-dark\">\r\n//           <tr>\r\n//             <th>Nº de Facture</th>\r\n//             <th>Nom Client</th>\r\n//             <th>Nº Bon de livraison</th>\r\n//             <th>Type de validation</th>\r\n//             <th>Mode de Règlement</th>\r\n//             <th>Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {renderTableData()}\r\n//         </tbody>\r\n//       </table>\r\n//       {renderPagination()}\r\n//       {renderModal()}\r\n//       {renderDeleteConfirmationModal()}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Table;\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}