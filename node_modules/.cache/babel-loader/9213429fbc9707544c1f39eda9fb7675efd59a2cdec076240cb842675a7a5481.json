{"ast":null,"code":"\n\n// import React, { useState, useEffect } from 'react';\n// import axios from '../router/axiosInstance';\n// import '../../css/Table.css'; // Import custom CSS file for styling\n// import Swal from 'sweetalert2';\n// import { getToken,deleteToken } from '../router/auth';\n// import { Link, useNavigate } from \"react-router-dom\";\n\n// const TableUsers = ({ data: initialData, itemsPerPage, reloadData }) => {\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [selectedRow, setSelectedRow] = useState(null);\n//   const [rowToDelete, setRowToDelete] = useState(null);\n//   const [role, setRole] = useState('');\n//   const [data, setData] = useState(initialData);\n//   const [passwordError, setPasswordError] = useState('');\n//   const [error, setError] = useState(null); \n//   const [user, setUser] = useState(null); \n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     const fetchUser = async () => {\n//       try {\n//         const token = getToken();\n\n//         if (token) {\n//           const response = await axios.get('http://localhost:8000/api/user', {\n//           });\n//           setUser(response.data.user.id);\n//         }\n//       } catch (error) {\n//         setError(error);\n//       }\n//     };\n\n//     fetchUser();\n//   }, []);\n\n//   useEffect(() => {\n//     setData(initialData);\n//   }, [initialData]);\n\n//   const [formData, setFormData] = useState({\n//     name: '',\n//     email: '',\n//     role: '',\n//     password: '',\n//     password_confirmation: ''\n//   });\n\n//   const handleChange = (e) => {\n//     const { name, value } = e.target;\n//     setFormData(prevState => ({\n//       ...prevState,\n//       [name]: value\n//     }));\n//   };\n\n//   const handleRoleChange = (e) => {\n//     setRole(e.target.value);\n//     handleChange(e)\n//   };\n\n//   const handleLogout = async () => {\n//     try {\n//       const token = getToken();\n\n//       if (token) {\n//         await axios.post('http://localhost:8000/api/logout', null, {\n//         });\n//         deleteToken();\n//         navigate('/');  \n//       }\n//     } catch (error) {\n//       console.error('Logout failed', error);\n//       }\n//       };\n\n//   const handleUpdateUser = async (e) => {\n//     e.preventDefault();\n//     if (formData.password !== formData.password_confirmation) {\n//       setPasswordError(\"Les mots de passe ne correspondent pas !\");\n//       return;\n//     }\n//     setPasswordError('');\n\n//     try {\n//       const updatedData = {\n//         name: formData.name,\n//         email: formData.email,\n//         role: formData.role,\n//         password: formData.password ,\n//         password_confirmation: formData.password_confirmation ,\n//       };\n\n//       const response = await axios.put(`http://localhost:8000/api/modifier/${selectedRow.id}`, updatedData);\n//       console.log(selectedRow.id);\n//       console.log(typeof selectedRow.id);\n//       if (response.data) {\n//       reloadData();\n//       handleCloseModal();\n\n//       if (selectedRow.id != user) {\n\n//         Swal.fire({\n//           icon: 'success',\n//           title: 'Mis à jour!',\n//           text: `Le compte de ${updatedData.name} a été mis à jour avec succès.`,\n//           confirmButtonColor: '#3085d6',\n//         });\n//       } else {\n//         Swal.fire({\n//           icon: 'success',\n//           title: 'Mis à jour!',\n//           text: `Le compte de ${updatedData.name} a été mis à jour avec succès merci de refaire votre login .`,\n//           confirmButtonColor: '#3085d6',\n//         });\n//         handleLogout()\n//       }\n//     }\n//     } catch (error) {\n//       console.error(\"Échec de la mise à jour de l'utilisateur :\", error);\n//       alert(\"Une erreur s'est produite lors de la mise à jour de l'utilisateur.\");\n//     }\n//   };\n\n//   const handleShowModal = (rowData) => {\n//     setSelectedRow(rowData);\n//     setFormData({\n//       name: rowData.name,\n//       email: rowData.email,\n//       role: rowData.roles,\n//       password: '',\n//       password_confirmation: ''\n//     });\n//     console.log(formData);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedRow(null);\n//     setPasswordError(''); // Clear password error when closing modal\n//   };\n\n//   // const  = (e) => {\n//   //   setRole(e.target.value);\n//   //   handleChange(e)\n//   // };\n\n//   const handleDeleteRow = async () => {\n//     if (!rowToDelete) return;\n\n//     try {\n//       const ItemId=rowToDelete.id;\n//       const response = await axios.delete(`http://localhost:8000/api/supprimer/${ItemId}`);\n\n//       if (response.status !== 200) {\n//         throw new Error('Failed to delete the user');\n//       }\n\n//       reloadData();\n//       setData(data.filter(item => item.id !== rowToDelete.id));\n//       setRowToDelete(null);\n\n//       Swal.fire({\n//         icon: 'success',\n//         title: 'Supprimé!',\n//         text: `Le compte ${rowToDelete.name} a été supprimé avec succès.`,\n//         confirmButtonColor: '#3085d6',\n//       });\n//     } catch (error) {\n//       console.error(\"Failed to delete user:\", error);\n//     }\n//   };\n\n//   const handleShowDeleteModal = (item) => {\n//     setRowToDelete(item);\n//   };  \n\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\n\n//   const handleChangePage = (page) => {\n//     setCurrentPage(page);\n//   };\n\n//   const renderDeleteConfirmationModal = () => {\n//     if (!rowToDelete) return null;\n\n//     return (\n//       <div className=\"modal-delete\">\n//         <div className=\"modal-content\">\n//           <span className=\"close\" onClick={() => setRowToDelete(null)}>&times;</span>\n//           <h2>Confirmation de suppression</h2>\n//           <p>Voulez-vous vraiment supprimer ce compte {rowToDelete.name}?</p>\n//           <div className='btns' style={{ textAlign: 'center', marginTop: '20px' }}>\n//             <button className='btn-delete' onClick={handleDeleteRow} style={{ marginRight: '10px'}}>Supprimer</button>\n//             <button onClick={() => setRowToDelete(null)}>Annuler</button>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   const renderTableData = () => {\n//     const startIndex = (currentPage - 1) * itemsPerPage;\n//     const endIndex = startIndex + itemsPerPage;\n//     return data.slice(startIndex, endIndex).map((item, index) => (\n//       <tr key={startIndex + index}>\n//         <td>{item.name}</td>\n//         <td>{item.email}</td>\n//         <td>{item.roles}</td>\n//         <td>***********</td>\n//         <td>\n//           <div className='actions'>\n//             <span className=\"tooltip\">\n//               <svg onClick={() => handleShowModal(item)} xmlns=\"http://www.w3.org/2000/svg\" width=\"1.2em\" height=\"1.2em\" viewBox=\"0 0 24 24\"><path fill=\"#78c2ff\" d=\"m21.561 5.318l-2.879-2.879A1.495 1.495 0 0 0 17.621 2c-.385 0-.768.146-1.061.439L13 6H4a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1v-9l3.561-3.561c.293-.293.439-.677.439-1.061s-.146-.767-.439-1.06M11.5 14.672L9.328 12.5l6.293-6.293l2.172 2.172zm-2.561-1.339l1.756 1.728L9 15zM16 19H5V8h6l-3.18 3.18c-.293.293-.478.812-.629 1.289c-.16.5-.191 1.056-.191 1.47V17h3.061c.414 0 1.108-.1 1.571-.29c.464-.19.896-.347 1.188-.64L16 13zm2.5-11.328L16.328 5.5l1.293-1.293l2.171 2.172z\"></path></svg>\n//               <span className=\"tooltiptext\">Modifier</span>\n//             </span>\n//             <span className=\"tooltip\">\n//               <svg onClick={() => handleShowDeleteModal(item)}  xmlns=\"http://www.w3.org/2000/svg\" width=\"1.6em\" height=\"1.6em\" viewBox=\"0 0 24 24\"><path fill=\"#00a6ed\" d=\"M12 2c5.53 0 10 4.47 10 10s-4.47 10-10 10S2 17.53 2 12S6.47 2 12 2m5 5h-2.5l-1-1h-3l-1 1H7v2h10zM9 18h6a1 1 0 0 0 1-1v-7H8v7a1 1 0 0 0 1 1\"></path></svg>\n//               <span className=\"tooltiptext\">Supprimer</span>\n//             </span>\n//           </div>\n//         </td>\n//       </tr>\n//     ));\n//   };\n\n//   const renderPagination = () => {\n//     const pages = [];\n//     const maxPagesToShow = 5;\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\n\n//     for (let i = startPage; i <= endPage; i++) {\n//       pages.push(\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\n//         </li>\n//       );\n//     }\n\n//     const previousButton = (\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\n//       </li>\n//     );\n\n//     const nextButton = (\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\n//       </li>\n//     );\n\n//     return (\n//       <nav>\n//         <ul className=\"pagination\">\n//           {previousButton}\n//           {pages}\n//           {nextButton}\n//         </ul>\n//       </nav>\n//     );\n//   };\n\n//   const renderModal = () => {\n//     if (!selectedRow) return null;\n//     console.log(formData);\n//     return (\n//       <div className=\"modal\">\n//         <div className=\"modal-content\">\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n//           <h3>Mettre à jour les informations :</h3>\n//           <form onSubmit={handleUpdateUser}>\n//             <div className='modal-items'>\n//               <div className=\"modal-item\">\n//                 <label>Nom Complet :</label>\n//                 <input\n//                   type=\"text\"\n//                   name=\"name\"\n//                   value={formData.name}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </div>\n//               <div className=\"modal-item\">\n//                 <label>Email:</label>\n//                 <input\n//                   type=\"email\"\n//                   name=\"email\"\n//                   value={formData.email}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </div>\n//               <div className=\"modal-item\">\n//                 <label>Mot de passe:</label>\n//                 <input\n//                   type=\"password\"\n//                   name=\"password\"\n//                   value={formData.password}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//               </div>\n//               <div className=\"modal-item\">\n//                 <label>Confirmer Mot de passe:</label>\n//                 <input\n//                   type=\"password\"\n//                   name=\"password_confirmation\"\n//                   value={formData.password_confirmation}\n//                   onChange={handleChange}\n//                   required\n//                 />\n//                 {passwordError && <div style={{ color: 'red', marginTop: '5px' }}>{passwordError}</div>}\n//               </div>\n//               <div className=\"modal-item\">\n//                 <label htmlFor=\"role\">Rôle:</label>\n//                 <select name=\"role\" id=\"role\" required value={formData.role}  onChange={handleRoleChange} className='selectrole'>\n//                   <option value=\"\" disabled selected>Choose a role</option>\n//                   <option value=\"Super Admin\">Super Admin</option>\n//                   <option value=\"Admin\">Admin</option>\n//                   <option value=\"Utilisateur\">Utilisateur</option>\n//                 </select>\n//               </div>\n//             </div>\n//             <button type=\"submit\">Enregistrer</button>\n//           </form>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"table-container\">\n//       <table className=\"table\">\n//         <thead className=\"thead-dark\">\n//           <tr>\n//             <th>Nom</th>\n//             <th>Adresse Email</th>\n//             <th>Rôle</th>\n//             <th>Mot de passe</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {renderTableData()}\n//         </tbody>\n//       </table>\n//       {renderPagination()}\n//       {renderModal()}\n//       {renderDeleteConfirmationModal()}\n//     </div>\n//   );\n// };\n\n// export default TableUsers;","map":{"version":3,"names":[],"sources":["/home/kawtar/Desktop/Invoice_Project_Frontend/src/Components/GestionComptes/TableUsers.js"],"sourcesContent":["\r\n\r\n// import React, { useState, useEffect } from 'react';\r\n// import axios from '../router/axiosInstance';\r\n// import '../../css/Table.css'; // Import custom CSS file for styling\r\n// import Swal from 'sweetalert2';\r\n// import { getToken,deleteToken } from '../router/auth';\r\n// import { Link, useNavigate } from \"react-router-dom\";\r\n\r\n\r\n// const TableUsers = ({ data: initialData, itemsPerPage, reloadData }) => {\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [selectedRow, setSelectedRow] = useState(null);\r\n//   const [rowToDelete, setRowToDelete] = useState(null);\r\n//   const [role, setRole] = useState('');\r\n//   const [data, setData] = useState(initialData);\r\n//   const [passwordError, setPasswordError] = useState('');\r\n//   const [error, setError] = useState(null); \r\n//   const [user, setUser] = useState(null); \r\n//   const navigate = useNavigate();\r\n\r\n    \r\n//   useEffect(() => {\r\n//     const fetchUser = async () => {\r\n//       try {\r\n//         const token = getToken();\r\n\r\n//         if (token) {\r\n//           const response = await axios.get('http://localhost:8000/api/user', {\r\n//           });\r\n//           setUser(response.data.user.id);\r\n//         }\r\n//       } catch (error) {\r\n//         setError(error);\r\n//       }\r\n//     };\r\n\r\n//     fetchUser();\r\n//   }, []);\r\n\r\n//   useEffect(() => {\r\n//     setData(initialData);\r\n//   }, [initialData]);\r\n  \r\n//   const [formData, setFormData] = useState({\r\n//     name: '',\r\n//     email: '',\r\n//     role: '',\r\n//     password: '',\r\n//     password_confirmation: ''\r\n//   });\r\n\r\n//   const handleChange = (e) => {\r\n//     const { name, value } = e.target;\r\n//     setFormData(prevState => ({\r\n//       ...prevState,\r\n//       [name]: value\r\n//     }));\r\n//   };\r\n\r\n//   const handleRoleChange = (e) => {\r\n//     setRole(e.target.value);\r\n//     handleChange(e)\r\n//   };\r\n\r\n//   const handleLogout = async () => {\r\n//     try {\r\n//       const token = getToken();\r\n  \r\n//       if (token) {\r\n//         await axios.post('http://localhost:8000/api/logout', null, {\r\n//         });\r\n//         deleteToken();\r\n//         navigate('/');  \r\n//       }\r\n//     } catch (error) {\r\n//       console.error('Logout failed', error);\r\n//       }\r\n//       };\r\n\r\n//   const handleUpdateUser = async (e) => {\r\n//     e.preventDefault();\r\n//     if (formData.password !== formData.password_confirmation) {\r\n//       setPasswordError(\"Les mots de passe ne correspondent pas !\");\r\n//       return;\r\n//     }\r\n//     setPasswordError('');\r\n  \r\n//     try {\r\n//       const updatedData = {\r\n//         name: formData.name,\r\n//         email: formData.email,\r\n//         role: formData.role,\r\n//         password: formData.password ,\r\n//         password_confirmation: formData.password_confirmation ,\r\n//       };\r\n     \r\n//       const response = await axios.put(`http://localhost:8000/api/modifier/${selectedRow.id}`, updatedData);\r\n//       console.log(selectedRow.id);\r\n//       console.log(typeof selectedRow.id);\r\n//       if (response.data) {\r\n//       reloadData();\r\n//       handleCloseModal();\r\n\r\n//       if (selectedRow.id != user) {\r\n\r\n//         Swal.fire({\r\n//           icon: 'success',\r\n//           title: 'Mis à jour!',\r\n//           text: `Le compte de ${updatedData.name} a été mis à jour avec succès.`,\r\n//           confirmButtonColor: '#3085d6',\r\n//         });\r\n//       } else {\r\n//         Swal.fire({\r\n//           icon: 'success',\r\n//           title: 'Mis à jour!',\r\n//           text: `Le compte de ${updatedData.name} a été mis à jour avec succès merci de refaire votre login .`,\r\n//           confirmButtonColor: '#3085d6',\r\n//         });\r\n//         handleLogout()\r\n//       }\r\n//     }\r\n//     } catch (error) {\r\n//       console.error(\"Échec de la mise à jour de l'utilisateur :\", error);\r\n//       alert(\"Une erreur s'est produite lors de la mise à jour de l'utilisateur.\");\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const handleShowModal = (rowData) => {\r\n//     setSelectedRow(rowData);\r\n//     setFormData({\r\n//       name: rowData.name,\r\n//       email: rowData.email,\r\n//       role: rowData.roles,\r\n//       password: '',\r\n//       password_confirmation: ''\r\n//     });\r\n//     console.log(formData);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setSelectedRow(null);\r\n//     setPasswordError(''); // Clear password error when closing modal\r\n//   };\r\n\r\n//   // const  = (e) => {\r\n//   //   setRole(e.target.value);\r\n//   //   handleChange(e)\r\n//   // };\r\n\r\n//   const handleDeleteRow = async () => {\r\n//     if (!rowToDelete) return;\r\n\r\n//     try {\r\n//       const ItemId=rowToDelete.id;\r\n//       const response = await axios.delete(`http://localhost:8000/api/supprimer/${ItemId}`);\r\n\r\n//       if (response.status !== 200) {\r\n//         throw new Error('Failed to delete the user');\r\n//       }\r\n\r\n//       reloadData();\r\n//       setData(data.filter(item => item.id !== rowToDelete.id));\r\n//       setRowToDelete(null);\r\n\r\n//       Swal.fire({\r\n//         icon: 'success',\r\n//         title: 'Supprimé!',\r\n//         text: `Le compte ${rowToDelete.name} a été supprimé avec succès.`,\r\n//         confirmButtonColor: '#3085d6',\r\n//       });\r\n//     } catch (error) {\r\n//       console.error(\"Failed to delete user:\", error);\r\n//     }\r\n//   };\r\n\r\n//   const handleShowDeleteModal = (item) => {\r\n//     setRowToDelete(item);\r\n//   };  \r\n\r\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n//   const handleChangePage = (page) => {\r\n//     setCurrentPage(page);\r\n//   };\r\n\r\n//   const renderDeleteConfirmationModal = () => {\r\n//     if (!rowToDelete) return null;\r\n\r\n//     return (\r\n//       <div className=\"modal-delete\">\r\n//         <div className=\"modal-content\">\r\n//           <span className=\"close\" onClick={() => setRowToDelete(null)}>&times;</span>\r\n//           <h2>Confirmation de suppression</h2>\r\n//           <p>Voulez-vous vraiment supprimer ce compte {rowToDelete.name}?</p>\r\n//           <div className='btns' style={{ textAlign: 'center', marginTop: '20px' }}>\r\n//             <button className='btn-delete' onClick={handleDeleteRow} style={{ marginRight: '10px'}}>Supprimer</button>\r\n//             <button onClick={() => setRowToDelete(null)}>Annuler</button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   const renderTableData = () => {\r\n//     const startIndex = (currentPage - 1) * itemsPerPage;\r\n//     const endIndex = startIndex + itemsPerPage;\r\n//     return data.slice(startIndex, endIndex).map((item, index) => (\r\n//       <tr key={startIndex + index}>\r\n//         <td>{item.name}</td>\r\n//         <td>{item.email}</td>\r\n//         <td>{item.roles}</td>\r\n//         <td>***********</td>\r\n//         <td>\r\n//           <div className='actions'>\r\n//             <span className=\"tooltip\">\r\n//               <svg onClick={() => handleShowModal(item)} xmlns=\"http://www.w3.org/2000/svg\" width=\"1.2em\" height=\"1.2em\" viewBox=\"0 0 24 24\"><path fill=\"#78c2ff\" d=\"m21.561 5.318l-2.879-2.879A1.495 1.495 0 0 0 17.621 2c-.385 0-.768.146-1.061.439L13 6H4a1 1 0 0 0-1 1v13a1 1 0 0 0 1 1h13a1 1 0 0 0 1-1v-9l3.561-3.561c.293-.293.439-.677.439-1.061s-.146-.767-.439-1.06M11.5 14.672L9.328 12.5l6.293-6.293l2.172 2.172zm-2.561-1.339l1.756 1.728L9 15zM16 19H5V8h6l-3.18 3.18c-.293.293-.478.812-.629 1.289c-.16.5-.191 1.056-.191 1.47V17h3.061c.414 0 1.108-.1 1.571-.29c.464-.19.896-.347 1.188-.64L16 13zm2.5-11.328L16.328 5.5l1.293-1.293l2.171 2.172z\"></path></svg>\r\n//               <span className=\"tooltiptext\">Modifier</span>\r\n//             </span>\r\n//             <span className=\"tooltip\">\r\n//               <svg onClick={() => handleShowDeleteModal(item)}  xmlns=\"http://www.w3.org/2000/svg\" width=\"1.6em\" height=\"1.6em\" viewBox=\"0 0 24 24\"><path fill=\"#00a6ed\" d=\"M12 2c5.53 0 10 4.47 10 10s-4.47 10-10 10S2 17.53 2 12S6.47 2 12 2m5 5h-2.5l-1-1h-3l-1 1H7v2h10zM9 18h6a1 1 0 0 0 1-1v-7H8v7a1 1 0 0 0 1 1\"></path></svg>\r\n//               <span className=\"tooltiptext\">Supprimer</span>\r\n//             </span>\r\n//           </div>\r\n//         </td>\r\n//       </tr>\r\n//     ));\r\n//   };\r\n\r\n//   const renderPagination = () => {\r\n//     const pages = [];\r\n//     const maxPagesToShow = 5;\r\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n//     for (let i = startPage; i <= endPage; i++) {\r\n//       pages.push(\r\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\r\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\r\n//         </li>\r\n//       );\r\n//     }\r\n\r\n//     const previousButton = (\r\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\r\n//       </li>\r\n//     );\r\n\r\n//     const nextButton = (\r\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\r\n//       </li>\r\n//     );\r\n\r\n//     return (\r\n//       <nav>\r\n//         <ul className=\"pagination\">\r\n//           {previousButton}\r\n//           {pages}\r\n//           {nextButton}\r\n//         </ul>\r\n//       </nav>\r\n//     );\r\n//   };\r\n\r\n//   const renderModal = () => {\r\n//     if (!selectedRow) return null;\r\n//     console.log(formData);\r\n//     return (\r\n//       <div className=\"modal\">\r\n//         <div className=\"modal-content\">\r\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\r\n//           <h3>Mettre à jour les informations :</h3>\r\n//           <form onSubmit={handleUpdateUser}>\r\n//             <div className='modal-items'>\r\n//               <div className=\"modal-item\">\r\n//                 <label>Nom Complet :</label>\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"name\"\r\n//                   value={formData.name}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </div>\r\n//               <div className=\"modal-item\">\r\n//                 <label>Email:</label>\r\n//                 <input\r\n//                   type=\"email\"\r\n//                   name=\"email\"\r\n//                   value={formData.email}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </div>\r\n//               <div className=\"modal-item\">\r\n//                 <label>Mot de passe:</label>\r\n//                 <input\r\n//                   type=\"password\"\r\n//                   name=\"password\"\r\n//                   value={formData.password}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </div>\r\n//               <div className=\"modal-item\">\r\n//                 <label>Confirmer Mot de passe:</label>\r\n//                 <input\r\n//                   type=\"password\"\r\n//                   name=\"password_confirmation\"\r\n//                   value={formData.password_confirmation}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//                 {passwordError && <div style={{ color: 'red', marginTop: '5px' }}>{passwordError}</div>}\r\n//               </div>\r\n//               <div className=\"modal-item\">\r\n//                 <label htmlFor=\"role\">Rôle:</label>\r\n//                 <select name=\"role\" id=\"role\" required value={formData.role}  onChange={handleRoleChange} className='selectrole'>\r\n//                   <option value=\"\" disabled selected>Choose a role</option>\r\n//                   <option value=\"Super Admin\">Super Admin</option>\r\n//                   <option value=\"Admin\">Admin</option>\r\n//                   <option value=\"Utilisateur\">Utilisateur</option>\r\n//                 </select>\r\n//               </div>\r\n//             </div>\r\n//             <button type=\"submit\">Enregistrer</button>\r\n//           </form>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"table-container\">\r\n//       <table className=\"table\">\r\n//         <thead className=\"thead-dark\">\r\n//           <tr>\r\n//             <th>Nom</th>\r\n//             <th>Adresse Email</th>\r\n//             <th>Rôle</th>\r\n//             <th>Mot de passe</th>\r\n//             <th>Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {renderTableData()}\r\n//         </tbody>\r\n//       </table>\r\n//       {renderPagination()}\r\n//       {renderModal()}\r\n//       {renderDeleteConfirmationModal()}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TableUsers;\r\n\r\n"],"mappings":";;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}