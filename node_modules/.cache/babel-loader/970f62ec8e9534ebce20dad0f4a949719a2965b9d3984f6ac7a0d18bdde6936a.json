{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Asus ZenBook 14\\\\Desktop\\\\My-github\\\\Invoice Project\\\\src\\\\Components\\\\Visualiser\\\\Table.js\",\n  _s = $RefreshSig$();\n// import React, { useState } from 'react';\n// import 'C:/Users/Asus ZenBook 14/Desktop/My-github/Invoice Project/src/css/Table.css'; // Import custom CSS file for styling\n\n// const TableWithData = ({ data, itemsPerPage }) => {\n//   const [currentPage, setCurrentPage] = useState(1);\n// const [selectedRow, setSelectedRow] = useState(null);\n\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\n\n//   const handleChangePage = (page) => {\n//     setCurrentPage(page);\n//   };\n\n//   const handleShowModal = (rowData) => {\n//     setSelectedRow(rowData);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedRow(null);\n//   };\n\n//   const handleDeleteRow = () => {\n\n//   };\n\n//   const renderTableData = () => {\n//     const startIndex = (currentPage - 1) * itemsPerPage;\n//     const endIndex = startIndex + itemsPerPage;\n//     return data.slice(startIndex, endIndex).map((item, index) => (\n//       <tr key={startIndex + index}>\n//         <td>{item.column1}</td>\n//         <td>{item.column2}</td>\n//         <td>{item.column3}</td>\n//         <td>{item.column4}</td>\n//         <td>{item.column5}</td>\n//         <td>\n//           <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\n//         </td>\n//       </tr>\n//     ));\n//   };\n\n//   const renderPagination = () => {\n//     const pages = [];\n//     const maxPagesToShow = 5;\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\n\n//     for (let i = startPage; i <= endPage; i++) {\n//       pages.push(\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\n//         </li>\n//       );\n//     }\n\n//     const previousButton = (\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\n//       </li>\n//     );\n\n//     const nextButton = (\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\n//       </li>\n//     );\n\n//     return (\n//       <nav>\n//         <ul className=\"pagination\">\n//           {previousButton}\n//           {pages}\n//           {nextButton}\n//         </ul>\n//       </nav>\n//     );\n//   };\n\n//   const renderModal = () => {\n//     if (!selectedRow) return null;\n\n//     return (\n//     <div className=\"modal\">\n//       <div className=\"modal-content\">\n//         <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n// <h2>Details</h2>\n// <div className='modal-items'>\n//   <div className=\"modal-item\">\n//     <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//   </div>\n//   <div className=\"modal-item\">\n//     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//   </div>\n// </div>\n//         <div className='modal-delete' >\n//           <center>\n//             <button onClick={handleDeleteRow}> Supprimer</button>\n//           </center>\n\n//         </div>\n//       </div>\n//     </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"table-container\">\n//       <table className=\"table\">\n// <thead className=\"thead-dark\">\n//   <tr>\n//     <th>Nº de Facture</th>\n//     <th>Nom Client</th>\n//     <th>Nº Bon de livraison</th>\n//     <th>Type de validation</th>\n//     <th>Mode de Règlement</th>\n//     <th>Action</th>\n//   </tr>\n// </thead>\n// <tbody>\n//   {renderTableData()}\n// </tbody>\n//       </table>\n//       {renderPagination()}\n//       {renderModal()}\n//     </div>\n//   );\n// };\n\n// export default TableWithData;\n\n// import React, { useState } from 'react';\n\n// const Table = ({ data, itemsPerPage }) => {\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [selectedRow, setSelectedRow] = useState(null);\n//   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\n\n//   const handleChangePage = (page) => {\n//     setCurrentPage(page);\n//   };\n\n//   const handleShowModal = (rowData) => {\n//     setSelectedRow(rowData);\n//   };\n\n//   const handleCloseModal = () => {\n//     setSelectedRow(null);\n//     setIsDeleteModalOpen(false);  // Fermer également le modal de suppression si ouvert\n//   };\n\n//   const handleDeleteRow = () => {\n//     setIsDeleteModalOpen(true); // Afficher le modal de confirmation\n//   };\n\n//   const confirmDelete = () => {\n//     console.log(\"Suppression de la ligne:\", selectedRow); // Logique de suppression ici\n//     setIsDeleteModalOpen(false);\n//     setSelectedRow(null);\n//     // TODO: Supprimer la ligne de la base de données ou de la source de données\n//   };\n\n//   const renderPagination = () => {\n//   const pages = [];\n//   const maxPagesToShow = 5;\n//   const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\n//   const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\n\n//   for (let i = startPage; i <= endPage; i++) {\n//     pages.push(\n//       <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\n//         <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\n//       </li>\n//     );\n//   }\n\n//   const previousButton = (\n//     <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\n//       <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\n//     </li>\n//   );\n\n//   const nextButton = (\n//     <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\n//       <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\n//     </li>\n//   );\n\n//   return (\n//     <nav>\n//       <ul className=\"pagination\">\n//         {previousButton}\n//         {pages}\n//         {nextButton}\n//       </ul>\n//     </nav>\n//   );\n// };\n\n// // Render des lignes de la table avec pagination\n// const renderTableData = () => {\n//   const startIndex = (currentPage - 1) * itemsPerPage;\n//   const endIndex = startIndex + itemsPerPage;\n//   return data.slice(startIndex, endIndex).map((item, index) => (\n//     <tr key={startIndex + index}>\n//       <td>{item.column1}</td>\n//       <td>{item.column2}</td>\n//       <td>{item.column3}</td>\n//       <td>{item.column4}</td>\n//       <td>{item.column5}</td>\n//       <td>\n//         <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\n//       </td>\n//     </tr>\n//   ));\n// };\n\n//   // Render du modal de détails\n//   const renderModal = () => {\n//     if (!selectedRow) return null;\n\n//     return (\n//       <div className=\"modal\">\n//         <div className=\"modal-content\">\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n//           <h2>Details</h2>\n//         <div className='modal-items'>\n//           <div className=\"modal-item\">\n//             <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//           </div>\n//           <div className=\"modal-item\">\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\n//           </div>\n//         </div>\n//           <div className=\"modal-delete\">\n//             <center>\n//               <button onClick={handleDeleteRow}>Supprimer</button>\n//             </center>\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   // Render du modal de confirmation de suppression\n//   const renderDeleteConfirmationModal = () => {\n//     if (!isDeleteModalOpen) return null;\n\n//     return (\n//       <div className=\"modal\">\n//         <div className=\"modal-content\">\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\n//           <h2>Confirmer la suppression</h2>\n//           <p>Êtes-vous sûr de vouloir supprimer cet enregistrement ?</p>\n//           <button onClick={confirmDelete}>Confirmer</button>\n//           <button onClick={handleCloseModal}>Annuler</button>\n//         </div>\n//       </div>\n//     );\n//   };\n\n//   return (\n//     <div className=\"table-container\">\n//       <table className=\"table\">\n//       <thead className=\"thead-dark\">\n//           <tr>\n//             <th>Nº de Facture</th>\n//             <th>Nom Client</th>\n//             <th>Nº Bon de livraison</th>\n//             <th>Type de validation</th>\n//             <th>Mode de Règlement</th>\n//             <th>Action</th>\n//           </tr>\n//         </thead>\n//         <tbody>\n//           {renderTableData()}\n//         </tbody>\n//       </table>\n//       {renderPagination()}\n//       {renderModal()}\n//       {renderDeleteConfirmationModal()}\n//     </div>\n//   );\n// };\n\n// export default Table;\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Table = ({\n  data,\n  itemsPerPage\n}) => {\n  _s();\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedRow, setSelectedRow] = useState(null);\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\n  const totalPages = Math.ceil(data.length / itemsPerPage);\n  const handleChangePage = page => {\n    setCurrentPage(page);\n  };\n  const handleShowModal = rowData => {\n    setSelectedRow(rowData);\n    setIsDetailModalOpen(true);\n  };\n  const handleCloseDetailModal = () => {\n    setSelectedRow(null);\n    setIsDetailModalOpen(false);\n  };\n  const handleDeleteRow = () => {\n    setIsDeleteModalOpen(true);\n    setIsDetailModalOpen(false);\n  };\n  const confirmDelete = () => {\n    console.log(\"Suppression de la ligne:\", selectedRow);\n    setIsDeleteModalOpen(false);\n    setSelectedRow(null);\n    // TODO: Supprimer la ligne de la base de données ou de la source de données\n  };\n  const handleCancelDelete = () => {\n    setIsDeleteModalOpen(false);\n    setIsDetailModalOpen(true);\n  };\n  const renderTableData = () => {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    return data.slice(startIndex, endIndex).map((item, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: [/*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.column1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.column2\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.column3\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.column4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 411,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: item.column5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 412,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => handleShowModal(item),\n          children: \"Plus d'infos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 413,\n        columnNumber: 9\n      }, this)]\n    }, startIndex + index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this));\n  };\n  const renderModal = () => {\n    if (!isDetailModalOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: handleCloseDetailModal,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"D\\xE9tails\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-delete\",\n          children: /*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleDeleteRow,\n              children: \"Supprimer\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this);\n  };\n  const renderDeleteConfirmationModal = () => {\n    if (!isDeleteModalOpen) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"close\",\n          onClick: handleCancelDelete,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 445,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirmer la suppression\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\xCAtes-vous s\\xFBr de vouloir supprimer cet enregistrement ?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: confirmDelete,\n          children: \"Confirmer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCancelDelete,\n          children: \"Annuler\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 449,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 443,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"table-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 458,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: renderTableData()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 461,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 457,\n      columnNumber: 7\n    }, this), renderPagination(), renderModal(), renderDeleteConfirmationModal()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 456,\n    columnNumber: 5\n  }, this);\n};\n_s(Table, \"IpoFdg96124vpCv2zu0CY4PFfVM=\");\n_c = Table;\nexport default Table;\nvar _c;\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Table","data","itemsPerPage","_s","currentPage","setCurrentPage","selectedRow","setSelectedRow","isDeleteModalOpen","setIsDeleteModalOpen","isDetailModalOpen","setIsDetailModalOpen","totalPages","Math","ceil","length","handleChangePage","page","handleShowModal","rowData","handleCloseDetailModal","handleDeleteRow","confirmDelete","console","log","handleCancelDelete","renderTableData","startIndex","endIndex","slice","map","item","index","children","column1","fileName","_jsxFileName","lineNumber","columnNumber","column2","column3","column4","column5","className","onClick","renderModal","renderDeleteConfirmationModal","renderPagination","_c","$RefreshReg$"],"sources":["C:/Users/Asus ZenBook 14/Desktop/My-github/Invoice Project/src/Components/Visualiser/Table.js"],"sourcesContent":["// import React, { useState } from 'react';\r\n// import 'C:/Users/Asus ZenBook 14/Desktop/My-github/Invoice Project/src/css/Table.css'; // Import custom CSS file for styling\r\n\r\n// const TableWithData = ({ data, itemsPerPage }) => {\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n// const [selectedRow, setSelectedRow] = useState(null);\r\n\r\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n//   const handleChangePage = (page) => {\r\n//     setCurrentPage(page);\r\n//   };\r\n\r\n//   const handleShowModal = (rowData) => {\r\n//     setSelectedRow(rowData);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setSelectedRow(null);\r\n//   };\r\n\r\n//   const handleDeleteRow = () => {\r\n\r\n//   };\r\n\r\n//   const renderTableData = () => {\r\n//     const startIndex = (currentPage - 1) * itemsPerPage;\r\n//     const endIndex = startIndex + itemsPerPage;\r\n//     return data.slice(startIndex, endIndex).map((item, index) => (\r\n//       <tr key={startIndex + index}>\r\n//         <td>{item.column1}</td>\r\n//         <td>{item.column2}</td>\r\n//         <td>{item.column3}</td>\r\n//         <td>{item.column4}</td>\r\n//         <td>{item.column5}</td>\r\n//         <td>\r\n//           <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\r\n//         </td>\r\n//       </tr>\r\n//     ));\r\n//   };\r\n\r\n//   const renderPagination = () => {\r\n//     const pages = [];\r\n//     const maxPagesToShow = 5;\r\n//     const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n//     const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n//     for (let i = startPage; i <= endPage; i++) {\r\n//       pages.push(\r\n//         <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\r\n//           <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\r\n//         </li>\r\n//       );\r\n//     }\r\n\r\n//     const previousButton = (\r\n//       <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\r\n//       </li>\r\n//     );\r\n\r\n//     const nextButton = (\r\n//       <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\r\n//         <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\r\n//       </li>\r\n//     );\r\n\r\n//     return (\r\n//       <nav>\r\n//         <ul className=\"pagination\">\r\n//           {previousButton}\r\n//           {pages}\r\n//           {nextButton}\r\n//         </ul>\r\n//       </nav>\r\n//     );\r\n//   };\r\n  \r\n\r\n//   const renderModal = () => {\r\n//     if (!selectedRow) return null;\r\n\r\n//     return (\r\n//     <div className=\"modal\">\r\n//       <div className=\"modal-content\">\r\n//         <span className=\"close\" onClick={handleCloseModal}>&times;</span>\r\n        // <h2>Details</h2>\r\n        // <div className='modal-items'>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n        //   </div>\r\n        //   <div className=\"modal-item\">\r\n        //     <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n        //   </div>\r\n        // </div>\r\n//         <div className='modal-delete' >\r\n//           <center>\r\n//             <button onClick={handleDeleteRow}> Supprimer</button>\r\n//           </center>\r\n          \r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"table-container\">\r\n//       <table className=\"table\">\r\n        // <thead className=\"thead-dark\">\r\n        //   <tr>\r\n        //     <th>Nº de Facture</th>\r\n        //     <th>Nom Client</th>\r\n        //     <th>Nº Bon de livraison</th>\r\n        //     <th>Type de validation</th>\r\n        //     <th>Mode de Règlement</th>\r\n        //     <th>Action</th>\r\n        //   </tr>\r\n        // </thead>\r\n        // <tbody>\r\n        //   {renderTableData()}\r\n        // </tbody>\r\n//       </table>\r\n//       {renderPagination()}\r\n//       {renderModal()}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default TableWithData;\r\n\r\n\r\n// import React, { useState } from 'react';\r\n\r\n// const Table = ({ data, itemsPerPage }) => {\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [selectedRow, setSelectedRow] = useState(null);\r\n//   const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n\r\n//   const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n//   const handleChangePage = (page) => {\r\n//     setCurrentPage(page);\r\n//   };\r\n\r\n//   const handleShowModal = (rowData) => {\r\n//     setSelectedRow(rowData);\r\n//   };\r\n\r\n//   const handleCloseModal = () => {\r\n//     setSelectedRow(null);\r\n//     setIsDeleteModalOpen(false);  // Fermer également le modal de suppression si ouvert\r\n//   };\r\n\r\n//   const handleDeleteRow = () => {\r\n//     setIsDeleteModalOpen(true); // Afficher le modal de confirmation\r\n//   };\r\n\r\n//   const confirmDelete = () => {\r\n//     console.log(\"Suppression de la ligne:\", selectedRow); // Logique de suppression ici\r\n//     setIsDeleteModalOpen(false);\r\n//     setSelectedRow(null);\r\n//     // TODO: Supprimer la ligne de la base de données ou de la source de données\r\n//   };\r\n\r\n  //   const renderPagination = () => {\r\n  //   const pages = [];\r\n  //   const maxPagesToShow = 5;\r\n  //   const startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n  //   const endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n  //   for (let i = startPage; i <= endPage; i++) {\r\n  //     pages.push(\r\n  //       <li className={`page-item ${currentPage === i ? 'active' : ''}`} key={i}>\r\n  //         <button className=\"page-link\" onClick={() => handleChangePage(i)}>{i}</button>\r\n  //       </li>\r\n  //     );\r\n  //   }\r\n\r\n  //   const previousButton = (\r\n  //     <li className={`page-item ${currentPage === 1 ? 'disabled' : ''}`}>\r\n  //       <button className=\"page-link\" onClick={() => handleChangePage(currentPage - 1)}>Previous</button>\r\n  //     </li>\r\n  //   );\r\n\r\n  //   const nextButton = (\r\n  //     <li className={`page-item ${currentPage === totalPages ? 'disabled' : ''}`}>\r\n  //       <button className=\"page-link\" onClick={() => handleChangePage(currentPage + 1)}>Next</button>\r\n  //     </li>\r\n  //   );\r\n\r\n  //   return (\r\n  //     <nav>\r\n  //       <ul className=\"pagination\">\r\n  //         {previousButton}\r\n  //         {pages}\r\n  //         {nextButton}\r\n  //       </ul>\r\n  //     </nav>\r\n  //   );\r\n  // };\r\n \r\n  // // Render des lignes de la table avec pagination\r\n  // const renderTableData = () => {\r\n  //   const startIndex = (currentPage - 1) * itemsPerPage;\r\n  //   const endIndex = startIndex + itemsPerPage;\r\n  //   return data.slice(startIndex, endIndex).map((item, index) => (\r\n  //     <tr key={startIndex + index}>\r\n  //       <td>{item.column1}</td>\r\n  //       <td>{item.column2}</td>\r\n  //       <td>{item.column3}</td>\r\n  //       <td>{item.column4}</td>\r\n  //       <td>{item.column5}</td>\r\n  //       <td>\r\n  //         <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\r\n  //       </td>\r\n  //     </tr>\r\n  //   ));\r\n  // };\r\n\r\n//   // Render du modal de détails\r\n//   const renderModal = () => {\r\n//     if (!selectedRow) return null;\r\n\r\n//     return (\r\n//       <div className=\"modal\">\r\n//         <div className=\"modal-content\">\r\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\r\n//           <h2>Details</h2>\r\n//         <div className='modal-items'>\r\n//           <div className=\"modal-item\">\r\n//             <p>Nº de Facture: <span className=\"facture\">{selectedRow.column1}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Nom Client: <span className=\"client\">{selectedRow.column2}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Nº Bon de livraison: <span className=\"bon\">{selectedRow.column3}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Type de validation: <span className=\"validation\">{selectedRow.column4}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column5}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column7}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column8}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column9}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column10}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column11}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column12}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n//           </div>\r\n//           <div className=\"modal-item\">\r\n//             <p>Mode de Règlement: <span className=\"reglement\">{selectedRow.column13}</span></p>\r\n//           </div>\r\n//         </div>\r\n//           <div className=\"modal-delete\">\r\n//             <center>\r\n//               <button onClick={handleDeleteRow}>Supprimer</button>\r\n//             </center>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   // Render du modal de confirmation de suppression\r\n//   const renderDeleteConfirmationModal = () => {\r\n//     if (!isDeleteModalOpen) return null;\r\n\r\n//     return (\r\n//       <div className=\"modal\">\r\n//         <div className=\"modal-content\">\r\n//           <span className=\"close\" onClick={handleCloseModal}>&times;</span>\r\n//           <h2>Confirmer la suppression</h2>\r\n//           <p>Êtes-vous sûr de vouloir supprimer cet enregistrement ?</p>\r\n//           <button onClick={confirmDelete}>Confirmer</button>\r\n//           <button onClick={handleCloseModal}>Annuler</button>\r\n//         </div>\r\n//       </div>\r\n//     );\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"table-container\">\r\n//       <table className=\"table\">\r\n//       <thead className=\"thead-dark\">\r\n//           <tr>\r\n//             <th>Nº de Facture</th>\r\n//             <th>Nom Client</th>\r\n//             <th>Nº Bon de livraison</th>\r\n//             <th>Type de validation</th>\r\n//             <th>Mode de Règlement</th>\r\n//             <th>Action</th>\r\n//           </tr>\r\n//         </thead>\r\n//         <tbody>\r\n//           {renderTableData()}\r\n//         </tbody>\r\n//       </table>\r\n//       {renderPagination()}\r\n//       {renderModal()}\r\n//       {renderDeleteConfirmationModal()}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Table;\r\n\r\n\r\n\r\n\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst Table = ({ data, itemsPerPage }) => {\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [selectedRow, setSelectedRow] = useState(null);\r\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\r\n  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);\r\n\r\n  const totalPages = Math.ceil(data.length / itemsPerPage);\r\n\r\n  const handleChangePage = (page) => {\r\n    setCurrentPage(page);\r\n  };\r\n\r\n  const handleShowModal = (rowData) => {\r\n    setSelectedRow(rowData);\r\n    setIsDetailModalOpen(true);\r\n  };\r\n\r\n  const handleCloseDetailModal = () => {\r\n    setSelectedRow(null);\r\n    setIsDetailModalOpen(false);\r\n  };\r\n\r\n  const handleDeleteRow = () => {\r\n    setIsDeleteModalOpen(true);\r\n    setIsDetailModalOpen(false);\r\n  };\r\n\r\n  const confirmDelete = () => {\r\n    console.log(\"Suppression de la ligne:\", selectedRow);\r\n    setIsDeleteModalOpen(false);\r\n    setSelectedRow(null);\r\n    // TODO: Supprimer la ligne de la base de données ou de la source de données\r\n  };\r\n\r\n  const handleCancelDelete = () => {\r\n    setIsDeleteModalOpen(false);\r\n    setIsDetailModalOpen(true);\r\n  };\r\n\r\n  const renderTableData = () => {\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const endIndex = startIndex + itemsPerPage;\r\n    return data.slice(startIndex, endIndex).map((item, index) => (\r\n      <tr key={startIndex + index}>\r\n        <td>{item.column1}</td>\r\n        <td>{item.column2}</td>\r\n        <td>{item.column3}</td>\r\n        <td>{item.column4}</td>\r\n        <td>{item.column5}</td>\r\n        <td>\r\n          <button className=\"btn btn-primary\" onClick={() => handleShowModal(item)}>Plus d'infos</button>\r\n        </td>\r\n      </tr>\r\n    ));\r\n  };\r\n\r\n  const renderModal = () => {\r\n    if (!isDetailModalOpen) return null;\r\n\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <span className=\"close\" onClick={handleCloseDetailModal}>&times;</span>\r\n          <h2>Détails</h2>\r\n          {/* Les détails du modal */}\r\n          <div className=\"modal-delete\">\r\n            <center>\r\n              <button onClick={handleDeleteRow}>Supprimer</button>\r\n            </center>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderDeleteConfirmationModal = () => {\r\n    if (!isDeleteModalOpen) return null;\r\n\r\n    return (\r\n      <div className=\"modal\">\r\n        <div className=\"modal-content\">\r\n          <span className=\"close\" onClick={handleCancelDelete}>&times;</span>\r\n          <h2>Confirmer la suppression</h2>\r\n          <p>Êtes-vous sûr de vouloir supprimer cet enregistrement ?</p>\r\n          <button onClick={confirmDelete}>Confirmer</button>\r\n          <button onClick={handleCancelDelete}>Annuler</button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"table-container\">\r\n      <table className=\"table\">\r\n        <thead>\r\n          {/* Entêtes du tableau */}\r\n        </thead>\r\n        <tbody>\r\n          {renderTableData()}\r\n        </tbody>\r\n      </table>\r\n      {renderPagination()}\r\n      {renderModal()}\r\n      {renderDeleteConfirmationModal()}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACR;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACQ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACR;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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"},"metadata":{},"sourceType":"module","externalDependencies":[]}