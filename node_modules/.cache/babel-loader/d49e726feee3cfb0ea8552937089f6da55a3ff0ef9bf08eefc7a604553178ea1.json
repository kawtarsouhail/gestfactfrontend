{"ast":null,"code":"var _jsxFileName = \"/home/kawtar/Desktop/Invoice_Project_Frontend/src/Components/Invoice.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport '../css/invoice.css';\nimport axios from '../Components/router/axiosInstance';\nimport Swal from 'sweetalert2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Invoice = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    NumFacture: \"\",\n    NomClient: \"\",\n    NumBonLiv: \"\",\n    dateBonLiv: \"\",\n    TypeValidation: \"Bon de Commande\",\n    MontantHT: \"\",\n    DateFacture: \"\",\n    Taux: \"\",\n    TVA: \"\",\n    MontantTTC: \"\",\n    NomEmetteur: \"\",\n    TypeContrat: \"contrat\",\n    EtabliPar: \"\",\n    EtaPayement: \"PAYEE\",\n    ModeReg: \"ESPÈCE\",\n    MontantEnc: \"\",\n    NumRemise: \"\",\n    NumCheque: \"\"\n  });\n  const [emetteurList, setEmetteurList] = useState([]);\n  // État pour suivre les champs qui doivent afficher un input au lieu d'un select\n  const [dynamicInputs, setDynamicInputs] = useState({});\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n\n    // Gérez la transformation de select en input ici\n    if (value === 'Autre') {\n      setDynamicInputs(prev => ({\n        ...prev,\n        [name]: true\n      }));\n    } else {\n      setDynamicInputs(prev => ({\n        ...prev,\n        [name]: false\n      }));\n    }\n  };\n  // const handleChange = (e) => {\n  //   const { name, value } = e.target;\n  //   setFormData(prev => ({\n  //     ...prev,\n  //     [name]: value\n  //   }));\n  // };\n\n  const handleBlur = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    if (name === 'NomEmetteur') {\n      let emetteurs = JSON.parse(localStorage.getItem('emetteurs') || '[]');\n      if (value && !emetteurs.includes(value)) {\n        emetteurs.push(value);\n        localStorage.setItem('emetteurs', JSON.stringify(emetteurs));\n      }\n    }\n  };\n  const handleFocus = e => {\n    const name = e.target.name;\n    if (name === 'NomEmetteur') {\n      const storedEmetteurs = JSON.parse(localStorage.getItem('emetteurs') || '[]');\n      setEmetteurList(storedEmetteurs);\n    }\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(formData);\n    try {\n      const response = await axios.post('http://localhost:8000/api/enregistrerFacture', formData);\n      Swal.fire({\n        icon: 'success',\n        title: 'Enregistrement réussi',\n        text: 'Les données ont été enregistrées avec succès.'\n      });\n      setFormData({\n        NumFacture: '',\n        NomClient: '',\n        NumBonLiv: '',\n        dateBonLiv: '',\n        TypeValidation: 'Bon de Commande',\n        MontantHT: '',\n        DateFacture: '',\n        Taux: '',\n        TVA: '',\n        MontantTTC: '',\n        NomEmetteur: '',\n        TypeContrat: 'contrat',\n        EtabliPar: '',\n        EtaPayement: 'PAYEE',\n        ModeReg: 'ESPÈCE',\n        MontantEnc: '',\n        NumRemise: '',\n        NumCheque: ''\n      });\n    } catch (error) {\n      console.error('Erreur lors de l\\'enregistrement de la facture:', error);\n      Swal.fire({\n        icon: 'error',\n        title: 'Erreur',\n        text: 'Une erreur est survenue lors de l\\'enregistrement des données. Veuillez réessayer.'\n      });\n    }\n  };\n  const fieldsConfig = [{\n    label: 'Nº de Facture',\n    type: 'text',\n    min: '0',\n    name: 'NumFacture'\n  }, {\n    label: 'Nom Client',\n    type: 'text',\n    name: 'NomClient'\n  }, {\n    label: 'Nº Bon de livraison',\n    type: 'text',\n    min: '0',\n    name: 'NumBonLiv'\n  }, {\n    label: 'Date de Livraison',\n    type: 'date',\n    name: 'dateBonLiv'\n  }, {\n    label: 'Type de validation',\n    type: 'select',\n    options: ['[Choisir Type Validation]', 'Bon de Commande', 'WhatsApp', 'Bon accord'],\n    name: 'TypeValidation'\n  }, {\n    label: 'Montant HT',\n    type: 'number',\n    min: '0',\n    name: 'MontantHT'\n  }, {\n    label: 'Date de Facture',\n    type: 'date',\n    name: 'DateFacture'\n  }, {\n    label: 'Taux',\n    type: 'number',\n    min: '0',\n    name: 'Taux'\n  }, {\n    label: 'TVA',\n    type: 'number',\n    min: '0',\n    name: 'TVA'\n  }, {\n    label: 'Montant TTC',\n    type: 'number',\n    min: '0',\n    name: 'MontantTTC'\n  }, {\n    label: 'Emetteur',\n    type: 'text',\n    name: 'NomEmetteur'\n  }, {\n    label: 'Type de contrat',\n    type: 'select',\n    options: ['[Choisir Type de contrat]', 'contrat', 'Ponctuel'],\n    name: 'TypeContrat'\n  }, {\n    label: 'Etablit Par',\n    type: 'text',\n    name: 'EtabliPar'\n  }, {\n    label: 'PAYEE / IMPAYEE',\n    type: 'select',\n    options: ['[Choisir PAYEE / IMPAYEE]', 'PAYEE', 'IMPAYEE'],\n    name: 'EtaPayement'\n  }, {\n    label: 'Mode de reglement',\n    type: 'select',\n    options: ['[MODE DE REGLEMENT]', 'ESPÈCE', 'CHÈQUE', 'VIREMENT', 'PAR EFFET'],\n    name: 'ModeReg'\n  }, {\n    label: 'Montant encaisse',\n    type: 'number',\n    min: '0',\n    name: 'MontantEnc'\n  }];\n\n  //   return (\n  //     <div className='invoice'>\n  //       <center><h1>Nouvelle Facture</h1></center>\n  //       <form className=\"form\" onSubmit={handleSubmit}>\n  //         <div className=\"input-container\">\n  //           {fieldsConfig.map((field, index) => (\n  //             <div key={index} className='item'>\n  //               <label>{field.label}</label>\n  //               {field.type === 'select' ? (\n  //               <select\n  //               className='selectFact'\n  //               name={field.name}\n  //               value={formData[field.name]}\n  //               onChange={handleChange}\n  //               required\n  //             >\n  //               {field.options.map((option, optionIndex) => (\n  //                 <option\n  //                   key={optionIndex}\n  //                   value={option}\n  //                   disabled={option.startsWith('[') && option !== formData[field.name]}\n  //                   selected={optionIndex === 0 && formData[field.name] === ''}\n  //                 >\n  //                   {option}\n  //                 </option>\n  //               ))}\n  //             </select>\n\n  //               ) : (\n  //                 <input\n  //                   type={field.type === 'sting' ? 'text' : field.type}\n  //                   name={field.name}\n  //                   value={formData[field.name]}\n  //                   onChange={handleChange}\n  //                   onFocus={field.name === 'NomEmetteur' ? handleFocus : undefined}\n  //                   onBlur={field.name === 'NomEmetteur' ? handleBlur : undefined}\n  //                   list={field.name === 'NomEmetteur' ? \"emetteur-options\" : undefined}\n  //                   min={field.min}\n  //                   required\n  //                 />\n  //               )}\n  //               {field.name === 'NomEmetteur' && (\n  //                 <datalist id=\"emetteur-options\">\n  //                   {emetteurList.map((emetteur, idx) => (\n  //                     <option key={idx} value={emetteur} />\n  //                   ))}\n  //                 </datalist>\n  //               )}\n  //             </div>\n  //           ))}\n  //           {/* Champs conditionnels pour le mode de paiement par chèque */}\n  //           {formData.ModeReg === 'CHÈQUE' && (\n  //             <>\n  //               <div className='item'>\n  //                 <label>Numéro de Remise</label>\n  //                 <input\n  //                   type=\"text\"\n  //                   name=\"NumRemise\"\n  //                   value={formData.NumRemise}\n  //                   onChange={handleChange}\n  //                   required\n  //                 />\n  //               </div>\n  //               <div className='item'>\n  //                 <label>Numéro de Chèque</label>\n  //                 <input\n  //                   type=\"text\"\n  //                   name=\"NumCheque\"\n  //                   value={formData.NumCheque}\n  //                   onChange={handleChange}\n  //                   required\n  //                 />\n  //               </div>\n  //             </>\n  //           )}\n  //         </div>\n  //         <div className=\"button-container\">\n  //           <button type=\"submit\">Enregistrer</button>\n  //         </div>\n  //       </form>\n  //     </div>\n  //   );\n  // };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"invoice\",\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Nouvelle Facture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: fieldsConfig.map((field, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"item\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: field.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), dynamicInputs[field.name] ? /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: field.name,\n            value: formData[field.name],\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 221,\n            columnNumber: 15\n          }, this) : field.type === 'select' ? /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"selectFact\",\n            name: field.name,\n            value: formData[field.name],\n            onChange: handleChange,\n            required: true,\n            children: field.options.map((option, optionIndex) => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              disabled: option.startsWith('[') && option !== formData[field.name],\n              children: option\n            }, optionIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n            type: field.type,\n            name: field.name,\n            value: formData[field.name],\n            onChange: handleChange,\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 247,\n            columnNumber: 15\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-container\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"Enregistrer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 3\n  }, this);\n};\n_s(Invoice, \"5QuFGv0jI2TWPn56c9yDyCKa+lE=\");\n_c = Invoice;\nexport default Invoice;\nvar _c;\n$RefreshReg$(_c, \"Invoice\");","map":{"version":3,"names":["React","useState","axios","Swal","jsxDEV","_jsxDEV","Invoice","_s","formData","setFormData","NumFacture","NomClient","NumBonLiv","dateBonLiv","TypeValidation","MontantHT","DateFacture","Taux","TVA","MontantTTC","NomEmetteur","TypeContrat","EtabliPar","EtaPayement","ModeReg","MontantEnc","NumRemise","NumCheque","emetteurList","setEmetteurList","dynamicInputs","setDynamicInputs","handleChange","event","name","value","target","prev","handleBlur","e","emetteurs","JSON","parse","localStorage","getItem","includes","push","setItem","stringify","handleFocus","storedEmetteurs","handleSubmit","preventDefault","console","log","response","post","fire","icon","title","text","error","fieldsConfig","label","type","min","options","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","map","field","index","onChange","required","option","optionIndex","disabled","startsWith","_c","$RefreshReg$"],"sources":["/home/kawtar/Desktop/Invoice_Project_Frontend/src/Components/Invoice.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport '../css/invoice.css';\r\nimport axios from '../Components/router/axiosInstance';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst Invoice = () => {\r\n  const [formData, setFormData] = useState({\r\n    NumFacture: \"\",\r\n    NomClient: \"\",\r\n    NumBonLiv: \"\",\r\n    dateBonLiv: \"\",\r\n    TypeValidation: \"Bon de Commande\",\r\n    MontantHT: \"\",\r\n    DateFacture: \"\",\r\n    Taux: \"\",\r\n    TVA: \"\",\r\n    MontantTTC: \"\",\r\n    NomEmetteur: \"\",\r\n    TypeContrat: \"contrat\",\r\n    EtabliPar: \"\",\r\n    EtaPayement: \"PAYEE\",\r\n    ModeReg: \"ESPÈCE\",\r\n    MontantEnc: \"\",\r\n    NumRemise: \"\",\r\n    NumCheque: \"\",\r\n  });\r\n  const [emetteurList, setEmetteurList] = useState([]);\r\n   // État pour suivre les champs qui doivent afficher un input au lieu d'un select\r\n   const [dynamicInputs, setDynamicInputs] = useState({});\r\n\r\n   const handleChange = (event) => {\r\n     const { name, value } = event.target;\r\n     setFormData(prev => ({ ...prev, [name]: value }));\r\n \r\n     // Gérez la transformation de select en input ici\r\n     if (value === 'Autre') {\r\n       setDynamicInputs(prev => ({ ...prev, [name]: true }));\r\n     } else {\r\n       setDynamicInputs(prev => ({ ...prev, [name]: false }));\r\n     }\r\n   };\r\n  // const handleChange = (e) => {\r\n  //   const { name, value } = e.target;\r\n  //   setFormData(prev => ({\r\n  //     ...prev,\r\n  //     [name]: value\r\n  //   }));\r\n  // };\r\n\r\n\r\n  const handleBlur = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === 'NomEmetteur') {\r\n      let emetteurs = JSON.parse(localStorage.getItem('emetteurs') || '[]');\r\n      if (value && !emetteurs.includes(value)) {\r\n        emetteurs.push(value);\r\n        localStorage.setItem('emetteurs', JSON.stringify(emetteurs));\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleFocus = (e) => {\r\n    const name = e.target.name;\r\n    if (name === 'NomEmetteur') {\r\n      const storedEmetteurs = JSON.parse(localStorage.getItem('emetteurs') || '[]');\r\n      setEmetteurList(storedEmetteurs);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    console.log(formData)\r\n    try {\r\n      const response = await axios.post('http://localhost:8000/api/enregistrerFacture', formData);\r\n      Swal.fire({\r\n        icon: 'success',\r\n        title: 'Enregistrement réussi',\r\n        text: 'Les données ont été enregistrées avec succès.'\r\n      });\r\n      setFormData({\r\n        NumFacture: '',\r\n        NomClient: '',\r\n        NumBonLiv: '',\r\n        dateBonLiv: '',\r\n        TypeValidation: 'Bon de Commande',\r\n        MontantHT: '',\r\n        DateFacture: '',\r\n        Taux: '',\r\n        TVA: '',\r\n        MontantTTC: '',\r\n        NomEmetteur: '',\r\n        TypeContrat: 'contrat',\r\n        EtabliPar: '',\r\n        EtaPayement: 'PAYEE',\r\n        ModeReg: 'ESPÈCE',\r\n        MontantEnc: '',\r\n        NumRemise: '',\r\n        NumCheque: '',\r\n      });\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'enregistrement de la facture:', error);\r\n      Swal.fire({\r\n        icon: 'error',\r\n        title: 'Erreur',\r\n        text: 'Une erreur est survenue lors de l\\'enregistrement des données. Veuillez réessayer.'\r\n      });\r\n    }\r\n  };\r\n\r\n  const fieldsConfig = [\r\n    { label: 'Nº de Facture', type: 'text', min: '0', name: 'NumFacture' },\r\n    { label: 'Nom Client', type: 'text', name: 'NomClient' },\r\n    { label: 'Nº Bon de livraison', type: 'text', min: '0', name: 'NumBonLiv' },\r\n    { label: 'Date de Livraison', type: 'date', name: 'dateBonLiv' },\r\n    { label: 'Type de validation', type: 'select', options: ['[Choisir Type Validation]', 'Bon de Commande', 'WhatsApp', 'Bon accord'], name: 'TypeValidation' },\r\n    { label: 'Montant HT', type: 'number', min: '0', name: 'MontantHT' },\r\n    { label: 'Date de Facture', type: 'date', name: 'DateFacture' },\r\n    { label: 'Taux', type: 'number', min: '0', name: 'Taux' },\r\n    { label: 'TVA', type: 'number', min: '0', name: 'TVA' },\r\n    { label: 'Montant TTC', type: 'number', min: '0', name: 'MontantTTC' },\r\n    { label: 'Emetteur', type: 'text', name: 'NomEmetteur' },\r\n    { label: 'Type de contrat', type: 'select', options: ['[Choisir Type de contrat]', 'contrat', 'Ponctuel'], name: 'TypeContrat' },\r\n    { label: 'Etablit Par', type: 'text', name: 'EtabliPar' },\r\n    { label: 'PAYEE / IMPAYEE', type: 'select', options: ['[Choisir PAYEE / IMPAYEE]', 'PAYEE', 'IMPAYEE'], name: 'EtaPayement' },\r\n    { label: 'Mode de reglement', type: 'select', options: ['[MODE DE REGLEMENT]', 'ESPÈCE', 'CHÈQUE', 'VIREMENT', 'PAR EFFET'], name: 'ModeReg' },\r\n    { label: 'Montant encaisse', type: 'number', min: '0', name: 'MontantEnc' }\r\n  ];\r\n  \r\n//   return (\r\n//     <div className='invoice'>\r\n//       <center><h1>Nouvelle Facture</h1></center>\r\n//       <form className=\"form\" onSubmit={handleSubmit}>\r\n//         <div className=\"input-container\">\r\n//           {fieldsConfig.map((field, index) => (\r\n//             <div key={index} className='item'>\r\n//               <label>{field.label}</label>\r\n//               {field.type === 'select' ? (\r\n//               <select\r\n//               className='selectFact'\r\n//               name={field.name}\r\n//               value={formData[field.name]}\r\n//               onChange={handleChange}\r\n//               required\r\n//             >\r\n//               {field.options.map((option, optionIndex) => (\r\n//                 <option\r\n//                   key={optionIndex}\r\n//                   value={option}\r\n//                   disabled={option.startsWith('[') && option !== formData[field.name]}\r\n//                   selected={optionIndex === 0 && formData[field.name] === ''}\r\n//                 >\r\n//                   {option}\r\n//                 </option>\r\n//               ))}\r\n//             </select>\r\n                        \r\n//               ) : (\r\n//                 <input\r\n//                   type={field.type === 'sting' ? 'text' : field.type}\r\n//                   name={field.name}\r\n//                   value={formData[field.name]}\r\n//                   onChange={handleChange}\r\n//                   onFocus={field.name === 'NomEmetteur' ? handleFocus : undefined}\r\n//                   onBlur={field.name === 'NomEmetteur' ? handleBlur : undefined}\r\n//                   list={field.name === 'NomEmetteur' ? \"emetteur-options\" : undefined}\r\n//                   min={field.min}\r\n//                   required\r\n//                 />\r\n//               )}\r\n//               {field.name === 'NomEmetteur' && (\r\n//                 <datalist id=\"emetteur-options\">\r\n//                   {emetteurList.map((emetteur, idx) => (\r\n//                     <option key={idx} value={emetteur} />\r\n//                   ))}\r\n//                 </datalist>\r\n//               )}\r\n//             </div>\r\n//           ))}\r\n//           {/* Champs conditionnels pour le mode de paiement par chèque */}\r\n//           {formData.ModeReg === 'CHÈQUE' && (\r\n//             <>\r\n//               <div className='item'>\r\n//                 <label>Numéro de Remise</label>\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"NumRemise\"\r\n//                   value={formData.NumRemise}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </div>\r\n//               <div className='item'>\r\n//                 <label>Numéro de Chèque</label>\r\n//                 <input\r\n//                   type=\"text\"\r\n//                   name=\"NumCheque\"\r\n//                   value={formData.NumCheque}\r\n//                   onChange={handleChange}\r\n//                   required\r\n//                 />\r\n//               </div>\r\n//             </>\r\n//           )}\r\n//         </div>\r\n//         <div className=\"button-container\">\r\n//           <button type=\"submit\">Enregistrer</button>\r\n//         </div>\r\n//       </form>\r\n//     </div>\r\n//   );\r\n// };\r\nreturn (\r\n  <div className='invoice'>\r\n    <center><h1>Nouvelle Facture</h1></center>\r\n    <form className=\"form\" onSubmit={handleSubmit}>\r\n      <div className=\"input-container\">\r\n        {fieldsConfig.map((field, index) => (\r\n          <div key={index} className='item'>\r\n            <label>{field.label}</label>\r\n            {dynamicInputs[field.name] ? (\r\n              <input\r\n                type=\"text\"\r\n                name={field.name}\r\n                value={formData[field.name]}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            ) : field.type === 'select' ? (\r\n              <select\r\n                className='selectFact'\r\n                name={field.name}\r\n                value={formData[field.name]}\r\n                onChange={handleChange}\r\n                required\r\n              >\r\n                {field.options.map((option, optionIndex) => (\r\n                  <option\r\n                    key={optionIndex}\r\n                    value={option}\r\n                    disabled={option.startsWith('[') && option !== formData[field.name]}\r\n                  >\r\n                    {option}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            ) : (\r\n              <input\r\n                type={field.type}\r\n                name={field.name}\r\n                value={formData[field.name]}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"button-container\">\r\n        <button type=\"submit\">Enregistrer</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n);\r\n};\r\nexport default Invoice;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}