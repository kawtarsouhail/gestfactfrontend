{"ast":null,"code":"var _jsxFileName = \"/home/kawtar/Desktop/Invoice_Project_Frontend/src/Components/Visualiser/Visualiser.js\",\n  _s = $RefreshSig$();\n// import React,{useState,useEffect} from 'react';\n// import Table from './Table';\n// import '../../css/Visualiser.css'\n\n// const Visualiser = () => {\n//   const [filtrageItem, setItemFiltrage] = useState('Valeur :');\n//   const [itemsPerPage, setItemsPerPage] = useState(5); \n//   const [payeeOrImpayee, setPayeeOrImpayee] = useState('');\n//   const [startDate, setStartDate] = useState('');\n//   const [endDate, setEndDate] = useState('');\n//   const [filtrageValue, setFiltrageValue] = useState('');\n//   const [data, setData] = useState([]);\n//   const [displayData, setDisplayData] = useState([]); // Add this line for derived data used for displaying\n\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   useEffect(()=>{\n//     isLogin();\n//   })\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       setLoading(true);\n//       setError(null);\n//       try {\n//         const response = await fetch('http://localhost:8000/api/getFactures'); // Replace with your actual API URL\n//         if (!response.ok) throw new Error('Failed to fetch');\n//         const result = await response.json();\n//         setData(result.donnees);\n//         setDisplayData(result.donnees);\n//       } catch (error) {\n//         setError(error.message);\n//       }\n//       setLoading(false);\n//       // console.log(data)\n//     };\n\n//     // isLogin(); // Ensures user is logged in\n//     fetchData(); // Fetches the data when the component mounts\n//   }, []);\n\n//   console.log(data)\n//   const handleChangefiltrage=(e)=>{\n//     e.preventDefault();\n//     setItemFiltrage(e.target.value);\n//   }\n\n//   const handleNumeroFactureChange = (e) => {\n//     const inputNum = e.target.value;\n//     setFiltrageValue(inputNum);\n\n//     if (inputNum.trim()) {  // Ensure input is not just white space\n//       const filteredData = data.filter(item => String(item.NumFacture) === inputNum.trim());\n//       setDisplayData(filteredData);  // Always set the filtered data, even if empty\n//     } else {\n//       setDisplayData(data);  // If no input, show all data\n//     }\n//   };\n\n//   const handleNomClientChange = (e) => {\n//     const inputNom = e.target.value.toUpperCase();\n//     setFiltrageValue(inputNom);\n\n//     if (inputNom.trim()) {  // Ensure input is not just white space\n//       const filteredData = data.filter(item => String(item.client.NomClient) === inputNom.trim());\n//       setDisplayData(filteredData);  // Always set the filtered data, even if empty\n//     } else {\n//       setDisplayData(data);  // If no input, show all data\n//     }\n//   };\n\n//   const handleEtatPayementChange = (e) => {\n//     const inputEtatPayment = e.target.value.toUpperCase();\n//     setPayeeOrImpayee(inputEtatPayment);\n//     console.log(inputEtatPayment);\n//     setFiltrageValue(inputEtatPayment);\n\n//     if (inputEtatPayment.trim()) {  // Ensure input is not just white space\n//       const filteredData = data.filter(item => String(item.EtaPayement) === inputEtatPayment.trim());\n//       setDisplayData(filteredData);  // Always set the filtered data, even if empty\n//     } else {\n//       setDisplayData(data);  // If no input, show all data\n//       console.log('failed')\n//     }\n//   };\n\n//   console.log('dataToDisplay',displayData);\n//   useEffect(() => {\n//     const applyFilters = () => {\n//       let filtered = data; // Commencez avec l'ensemble complet des données\n\n//       // Application des filtres textuels\n//       if (filtrageValue) {\n//         switch (filtrageItem) {\n//           case 'Nº de Facture :':\n//             filtered = filtered.filter(item => String(item.NumFacture) === filtrageValue.trim());\n//             break;\n//           case 'Nom Client :':\n//             filtered = filtered.filter(item => String(item.client.NomClient).toUpperCase() === filtrageValue.trim());\n//             break;\n//           case 'Payée/Impayée :':\n//             filtered = filtered.filter(item => String(item.EtaPayement).toUpperCase() === filtrageValue.trim());\n//             break;\n//           default:\n//             break;\n//         }\n//       }\n\n//       // Filtre de date\n//       if (startDate && endDate) {\n//         const start = new Date(startDate);\n//         const end = new Date(endDate);\n//         end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\n//         filtered = filtered.filter(item => {\n//           const itemDate = new Date(item.DateFacture);\n//           return itemDate >= start && itemDate <= end;\n//         });\n//       }\n\n//       setDisplayData(filtered);\n//     };\n\n//     applyFilters();\n//   }, [data, filtrageValue, filtrageItem, startDate, endDate]); // Inclure startDate et endDate comme dépendances\n\n//   const handleItemsPerPageChange = (e) => {\n//     setItemsPerPage(parseInt(e.target.value)); // Convertir la valeur en nombre entier\n//   };  \n\n//   const renderInputOrSelect = () => {\n\n//     if (filtrageItem === 'Payée/Impayée :') {\n//       return (\n//         <select\n//           id=\"payeeOrImpayeeSelect\"\n//           className=\"form-control\"\n//           value={payeeOrImpayee}\n//           onChange={handleEtatPayementChange}\n//         >\n//           <option value=\"\" disabled>[Choisir]</option>\n//           <option value=\"PAYEE\">Payée</option>\n//           <option value=\"IMPAYEE\">Impayée</option>\n//         </select>\n//       );\n//     } else if(filtrageItem === 'Nom Client :'){\n//       return (\n//         <input\n//           type=\"text\"\n//           className=\"form-control\"\n//           id=\"textInput\"\n//           placeholder=\"Enter value\"\n//           disabled={filtrageItem === 'Valeur :'}\n//           onChange={handleNomClientChange}\n//         />\n//       );\n//     }\n\n//     else{\n//       return (\n//         <input\n//           type=\"text\"\n//           className=\"form-control\"\n//           id=\"textInput\"\n//           placeholder=\"Enter value\"\n//           disabled={filtrageItem === 'Valeur :'}\n//           onChange={handleNumeroFactureChange}\n//         />\n//       );\n//     }\n//   };\n\n//   const filterByDate = () => {\n//     if (!startDate || !endDate) return; // Assurez-vous que les deux dates sont définies\n\n//     const start = new Date(startDate);\n//     const end = new Date(endDate);\n//     end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\n\n//     const filtered = data.filter(item => {\n//       const itemDate = new Date(item.DateFacture);\n//       return itemDate >= start && itemDate <= end;\n//     });\n\n//     setDisplayData(filtered);\n//   };  \n\n//   const handleStartDateChange = (e) => {\n//     setStartDate(e.target.value);\n//     // Logique supplémentaire si nécessaire\n//   };\n\n//   const handleEndDateChange = (e) => {\n//     setEndDate(e.target.value);\n//     filterByDate();\n//     // Logique supplémentaire si nécessaire\n//   };\n\n//   const resetDates = (e) => {\n//     e.preventDefault();\n//     setStartDate(null);\n//     setEndDate(null);\n//     setDisplayData(data); // Reafficher toutes les données puisque les filtres de dates sont enlevés\n//   };\n\n//   if (loading) return <p>Loading...</p>;\n//   if (error) return <p>Error: {error}</p>;\n//   return (\n//     <div className=\"Visualiser\">\n//       <center>\n//         <h2>Visualiser Facture</h2>\n//       </center>\n//       <div className=\"form-group\">\n//         <label htmlFor=\"selectOption\">Element de Filtrage:</label>\n//         <select\n//           id=\"selectOption\"\n//           className=\"form-control\"\n//           onChange={(e) => handleChangefiltrage(e)}\n//         >\n//           <option value=\"Valeur :\">[ Toutes les Factures ]</option>\n//           <option value=\"Nº de Facture :\">Nº de Facture</option>\n//           <option value=\"Nom Client :\">Nom Client</option>\n//           <option value=\"Payée/Impayée :\">Payée/Impayée</option>\n//         </select>\n\n//         <label htmlFor=\"textInput\">{filtrageItem}</label>\n//         {renderInputOrSelect()}\n//         <select\n//           id=\"itemsPerPageSelect\"\n//           onChange={(e) => handleItemsPerPageChange(e)}\n//           title=\"Nombre de colonnes\"\n//         >\n//           <option value=\"5\">5</option>\n//           <option value=\"10\">10</option>\n//           <option value=\"15\">15</option>\n//           <option value=\"20\">20</option>\n//         </select>\n//       </div>\n//       <div className=\"date-filters\">\n//           <label htmlFor=\"startDate\">Date de Facture De :</label>\n//           <input\n//             type=\"date\"\n//             id=\"startDate\"\n//             className=\"form-control\"\n//             value={startDate || ''} // S'assure que la valeur est toujours une chaîne valide\n//             onChange={(e) => handleStartDateChange(e)}\n//           />\n\n//           <label htmlFor=\"endDate\">À :</label>\n//           <input\n//             type=\"date\"\n//             id=\"endDate\"\n//             className=\"form-control\"\n//             value={endDate || ''} // S'assure que la valeur est toujours une chaîne valide\n//             onChange={(e) => handleEndDateChange(e)}\n//           />\n\n//           <div onClick={resetDates} className='resetDateBtn' title='Actualiser les dates'>\n//             <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.3em\" height=\"1.3em\" viewBox=\"0 0 21 21\"><g fill=\"none\" fillRule=\"evenodd\" stroke=\"#ffff\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3.578 6.487A8 8 0 1 1 2.5 10.5\"></path><path d=\"M7.5 6.5h-4v-4\"></path></g></svg>\n//           </div>\n//         </div>\n//       <Table data={displayData} itemsPerPage={itemsPerPage} />\n//     </div>\n//   );\n// };\n\n// export default Visualiser;\n\nimport React, { useState, useEffect } from 'react';\nimport Table from './Table';\nimport axios from '../router/axiosInstance';\nimport { getToken } from '../router/auth';\nimport '../../css/Visualiser.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Visualiser = () => {\n  _s();\n  const [filtrageItem, setItemFiltrage] = useState('Valeur :');\n  const [itemsPerPage, setItemsPerPage] = useState(5);\n  const [payeeOrImpayee, setPayeeOrImpayee] = useState('');\n  const [startDate, setStartDate] = useState('');\n  const [endDate, setEndDate] = useState('');\n  const [filtrageValue, setFiltrageValue] = useState('');\n  const [data, setData] = useState([]);\n  const [displayData, setDisplayData] = useState([]); // Add this line for derived data used for displaying\n\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [role, setRole] = useState(null);\n  const [userCanDelete, setUserCanDelete] = useState(true);\n  useEffect(() => {\n    const fetchUser = async () => {\n      try {\n        const token = getToken();\n        if (token) {\n          const response = await axios.get('http://localhost:8000/api/user', {});\n          setRole(response.data.role);\n        }\n      } catch (error) {\n        setError(error);\n      }\n    };\n    fetchUser();\n  }, []);\n  useEffect(() => {\n    if (role === 'Super Admin' || role === 'Admin') {\n      setUserCanDelete(true);\n    } else if (role === 'Utilisateur') {\n      setUserCanDelete(false);\n    } else {\n      console.error('Unknown role');\n    }\n  }, [role]);\n  useEffect(() => {\n    try {\n      axios.get('http://localhost:8000/api/getFacture').then(response => {\n        setData(response.data.donnees);\n        setDisplayData(response.data.donnees);\n      });\n    } catch (error) {\n      console.error('Error fetching data:', error);\n    }\n  }, []);\n  console.log(data);\n  const handleChangefiltrage = e => {\n    e.preventDefault();\n    setItemFiltrage(e.target.value);\n  };\n  const handleNumeroFactureChange = e => {\n    const inputNum = e.target.value;\n    setFiltrageValue(inputNum);\n    if (inputNum.trim()) {\n      // Ensure input is not just white space\n      const filteredData = data.filter(item => String(item.NumFacture) === inputNum.trim());\n      setDisplayData(filteredData); // Always set the filtered data, even if empty\n    } else {\n      setDisplayData(data); // If no input, show all data\n    }\n  };\n  const handleNomClientChange = e => {\n    const inputNom = e.target.value.toUpperCase();\n    setFiltrageValue(inputNom);\n    if (inputNom.trim()) {\n      // Ensure input is not just white space\n      const filteredData = data.filter(item => String(item.client.NomClient) === inputNom.trim());\n      setDisplayData(filteredData); // Always set the filtered data, even if empty\n    } else {\n      setDisplayData(data); // If no input, show all data\n    }\n  };\n  const handleEtatPayementChange = e => {\n    const inputEtatPayment = e.target.value.toUpperCase();\n    setPayeeOrImpayee(inputEtatPayment);\n    console.log(inputEtatPayment);\n    setFiltrageValue(inputEtatPayment);\n    if (inputEtatPayment.trim()) {\n      // Ensure input is not just white space\n      const filteredData = data.filter(item => String(item.EtaPayement) === inputEtatPayment.trim());\n      setDisplayData(filteredData); // Always set the filtered data, even if empty\n    } else {\n      setDisplayData(data); // If no input, show all data\n      console.log('failed');\n    }\n  };\n  console.log('dataToDisplay', displayData);\n  useEffect(() => {\n    const applyFilters = () => {\n      let filtered = data; // Commencez avec l'ensemble complet des données\n\n      // Application des filtres textuels\n      if (filtrageValue) {\n        switch (filtrageItem) {\n          case 'Nº de Facture :':\n            filtered = filtered.filter(item => String(item.NumFacture) === filtrageValue.trim());\n            break;\n          case 'Nom Client :':\n            filtered = filtered.filter(item => String(item.client.NomClient).toUpperCase() === filtrageValue.trim());\n            break;\n          case 'Payée/Impayée :':\n            filtered = filtered.filter(item => String(item.EtaPayement).toUpperCase() === filtrageValue.trim());\n            break;\n          default:\n            break;\n        }\n      }\n\n      // Filtre de date\n      if (startDate && endDate) {\n        const start = new Date(startDate);\n        const end = new Date(endDate);\n        end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\n        filtered = filtered.filter(item => {\n          const itemDate = new Date(item.DateFacture);\n          return itemDate >= start && itemDate <= end;\n        });\n      }\n      setDisplayData(filtered);\n    };\n    applyFilters();\n  }, [data, filtrageValue, filtrageItem, startDate, endDate]); // Inclure startDate et endDate comme dépendances\n\n  const handleItemsPerPageChange = e => {\n    setItemsPerPage(parseInt(e.target.value)); // Convertir la valeur en nombre entier\n  };\n  const renderInputOrSelect = () => {\n    if (filtrageItem === 'Payée/Impayée :') {\n      return /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"payeeOrImpayeeSelect\",\n        className: \"form-control\",\n        value: payeeOrImpayee,\n        onChange: handleEtatPayementChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"\",\n          disabled: true,\n          children: \"[Choisir]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"PAYEE\",\n          children: \"Pay\\xE9e\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 443,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"IMPAYEE\",\n          children: \"Impay\\xE9e\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 436,\n        columnNumber: 9\n      }, this);\n    } else if (filtrageItem === 'Nom Client :') {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"textInput\",\n        placeholder: \"Enter value\",\n        disabled: filtrageItem === 'Valeur :',\n        onChange: handleNomClientChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"textInput\",\n        placeholder: \"Enter value\",\n        disabled: filtrageItem === 'Valeur :',\n        onChange: handleNumeroFactureChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 9\n      }, this);\n    }\n  };\n  const filterByDate = () => {\n    if (!startDate || !endDate) return; // Assurez-vous que les deux dates sont définies\n\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\n\n    const filtered = data.filter(item => {\n      const itemDate = new Date(item.DateFacture);\n      return itemDate >= start && itemDate <= end;\n    });\n    setDisplayData(filtered);\n  };\n  const handleStartDateChange = e => {\n    setStartDate(e.target.value);\n    // Logique supplémentaire si nécessaire\n  };\n  const handleEndDateChange = e => {\n    setEndDate(e.target.value);\n    filterByDate();\n    // Logique supplémentaire si nécessaire\n  };\n  const resetDates = e => {\n    e.preventDefault();\n    setStartDate(null);\n    setEndDate(null);\n    setDisplayData(data); // Reafficher toutes les données puisque les filtres de dates sont enlevés\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 507,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 508,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Visualiser\",\n    children: [/*#__PURE__*/_jsxDEV(\"center\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Visualiser Facture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 512,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"selectOption\",\n        children: \"Element de Filtrage:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"selectOption\",\n        className: \"form-control\",\n        onChange: e => handleChangefiltrage(e),\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Valeur :\",\n          children: \"[ Toutes les Factures ]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 521,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"N\\xBA de Facture :\",\n          children: \"N\\xBA de Facture\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Nom Client :\",\n          children: \"Nom Client\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 523,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Pay\\xE9e/Impay\\xE9e :\",\n          children: \"Pay\\xE9e/Impay\\xE9e\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 524,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 516,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"textInput\",\n        children: filtrageItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 9\n      }, this), renderInputOrSelect(), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"itemsPerPageSelect\",\n        onChange: e => handleItemsPerPageChange(e),\n        title: \"Nombre de colonnes\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"5\",\n          children: \"5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 534,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"10\",\n          children: \"10\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"15\",\n          children: \"15\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 536,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"20\",\n          children: \"20\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 537,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"date-filters\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"startDate\",\n        children: \"Date de Facture De :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"startDate\",\n        className: \"form-control\",\n        value: startDate || '' // S'assure que la valeur est toujours une chaîne valide\n        ,\n        onChange: e => handleStartDateChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 542,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"endDate\",\n        children: \"\\xC0 :\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 550,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"date\",\n        id: \"endDate\",\n        className: \"form-control\",\n        value: endDate || '' // S'assure que la valeur est toujours une chaîne valide\n        ,\n        onChange: e => handleEndDateChange(e)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 551,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: resetDates,\n        className: \"resetDateBtn\",\n        title: \"Actualiser les dates\",\n        children: /*#__PURE__*/_jsxDEV(\"svg\", {\n          xmlns: \"http://www.w3.org/2000/svg\",\n          width: \"1.3em\",\n          height: \"1.3em\",\n          viewBox: \"0 0 21 21\",\n          children: /*#__PURE__*/_jsxDEV(\"g\", {\n            fill: \"none\",\n            fillRule: \"evenodd\",\n            stroke: \"#ffff\",\n            strokeLinecap: \"round\",\n            strokeLinejoin: \"round\",\n            children: [/*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M3.578 6.487A8 8 0 1 1 2.5 10.5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 196\n            }, this), /*#__PURE__*/_jsxDEV(\"path\", {\n              d: \"M7.5 6.5h-4v-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 560,\n              columnNumber: 245\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 102\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 540,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      data: displayData,\n      itemsPerPage: itemsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 563,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 510,\n    columnNumber: 5\n  }, this);\n};\n_s(Visualiser, \"kzNM/JZ2CgzmC5BV5vk4VshKF2E=\");\n_c = Visualiser;\nexport default Visualiser;\nvar _c;\n$RefreshReg$(_c, \"Visualiser\");","map":{"version":3,"names":["React","useState","useEffect","Table","axios","getToken","jsxDEV","_jsxDEV","Visualiser","_s","filtrageItem","setItemFiltrage","itemsPerPage","setItemsPerPage","payeeOrImpayee","setPayeeOrImpayee","startDate","setStartDate","endDate","setEndDate","filtrageValue","setFiltrageValue","data","setData","displayData","setDisplayData","loading","setLoading","error","setError","role","setRole","userCanDelete","setUserCanDelete","fetchUser","token","response","get","console","then","donnees","log","handleChangefiltrage","e","preventDefault","target","value","handleNumeroFactureChange","inputNum","trim","filteredData","filter","item","String","NumFacture","handleNomClientChange","inputNom","toUpperCase","client","NomClient","handleEtatPayementChange","inputEtatPayment","EtaPayement","applyFilters","filtered","start","Date","end","setHours","itemDate","DateFacture","handleItemsPerPageChange","parseInt","renderInputOrSelect","id","className","onChange","children","disabled","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","filterByDate","handleStartDateChange","handleEndDateChange","resetDates","htmlFor","title","onClick","xmlns","width","height","viewBox","fill","fillRule","stroke","strokeLinecap","strokeLinejoin","d","_c","$RefreshReg$"],"sources":["/home/kawtar/Desktop/Invoice_Project_Frontend/src/Components/Visualiser/Visualiser.js"],"sourcesContent":["// import React,{useState,useEffect} from 'react';\r\n// import Table from './Table';\r\n// import '../../css/Visualiser.css'\r\n\r\n\r\n// const Visualiser = () => {\r\n//   const [filtrageItem, setItemFiltrage] = useState('Valeur :');\r\n//   const [itemsPerPage, setItemsPerPage] = useState(5); \r\n//   const [payeeOrImpayee, setPayeeOrImpayee] = useState('');\r\n//   const [startDate, setStartDate] = useState('');\r\n//   const [endDate, setEndDate] = useState('');\r\n//   const [filtrageValue, setFiltrageValue] = useState('');\r\n//   const [data, setData] = useState([]);\r\n//   const [displayData, setDisplayData] = useState([]); // Add this line for derived data used for displaying\r\n\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n  \r\n\r\n\r\n//   useEffect(()=>{\r\n//     isLogin();\r\n//   })\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       setLoading(true);\r\n//       setError(null);\r\n//       try {\r\n//         const response = await fetch('http://localhost:8000/api/getFactures'); // Replace with your actual API URL\r\n//         if (!response.ok) throw new Error('Failed to fetch');\r\n//         const result = await response.json();\r\n//         setData(result.donnees);\r\n//         setDisplayData(result.donnees);\r\n//       } catch (error) {\r\n//         setError(error.message);\r\n//       }\r\n//       setLoading(false);\r\n//       // console.log(data)\r\n//     };\r\n  \r\n//     // isLogin(); // Ensures user is logged in\r\n//     fetchData(); // Fetches the data when the component mounts\r\n//   }, []);\r\n\r\n//   console.log(data)\r\n//   const handleChangefiltrage=(e)=>{\r\n//     e.preventDefault();\r\n//     setItemFiltrage(e.target.value);\r\n//   }\r\n\r\n//   const handleNumeroFactureChange = (e) => {\r\n//     const inputNum = e.target.value;\r\n//     setFiltrageValue(inputNum);\r\n  \r\n//     if (inputNum.trim()) {  // Ensure input is not just white space\r\n//       const filteredData = data.filter(item => String(item.NumFacture) === inputNum.trim());\r\n//       setDisplayData(filteredData);  // Always set the filtered data, even if empty\r\n//     } else {\r\n//       setDisplayData(data);  // If no input, show all data\r\n//     }\r\n//   };\r\n\r\n//   const handleNomClientChange = (e) => {\r\n//     const inputNom = e.target.value.toUpperCase();\r\n//     setFiltrageValue(inputNom);\r\n  \r\n//     if (inputNom.trim()) {  // Ensure input is not just white space\r\n//       const filteredData = data.filter(item => String(item.client.NomClient) === inputNom.trim());\r\n//       setDisplayData(filteredData);  // Always set the filtered data, even if empty\r\n//     } else {\r\n//       setDisplayData(data);  // If no input, show all data\r\n//     }\r\n//   };\r\n\r\n//   const handleEtatPayementChange = (e) => {\r\n//     const inputEtatPayment = e.target.value.toUpperCase();\r\n//     setPayeeOrImpayee(inputEtatPayment);\r\n//     console.log(inputEtatPayment);\r\n//     setFiltrageValue(inputEtatPayment);\r\n\r\n  \r\n//     if (inputEtatPayment.trim()) {  // Ensure input is not just white space\r\n//       const filteredData = data.filter(item => String(item.EtaPayement) === inputEtatPayment.trim());\r\n//       setDisplayData(filteredData);  // Always set the filtered data, even if empty\r\n//     } else {\r\n//       setDisplayData(data);  // If no input, show all data\r\n//       console.log('failed')\r\n//     }\r\n//   };\r\n  \r\n//   console.log('dataToDisplay',displayData);\r\n//   useEffect(() => {\r\n//     const applyFilters = () => {\r\n//       let filtered = data; // Commencez avec l'ensemble complet des données\r\n  \r\n//       // Application des filtres textuels\r\n//       if (filtrageValue) {\r\n//         switch (filtrageItem) {\r\n//           case 'Nº de Facture :':\r\n//             filtered = filtered.filter(item => String(item.NumFacture) === filtrageValue.trim());\r\n//             break;\r\n//           case 'Nom Client :':\r\n//             filtered = filtered.filter(item => String(item.client.NomClient).toUpperCase() === filtrageValue.trim());\r\n//             break;\r\n//           case 'Payée/Impayée :':\r\n//             filtered = filtered.filter(item => String(item.EtaPayement).toUpperCase() === filtrageValue.trim());\r\n//             break;\r\n//           default:\r\n//             break;\r\n//         }\r\n//       }\r\n  \r\n//       // Filtre de date\r\n//       if (startDate && endDate) {\r\n//         const start = new Date(startDate);\r\n//         const end = new Date(endDate);\r\n//         end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\r\n//         filtered = filtered.filter(item => {\r\n//           const itemDate = new Date(item.DateFacture);\r\n//           return itemDate >= start && itemDate <= end;\r\n//         });\r\n//       }\r\n  \r\n//       setDisplayData(filtered);\r\n//     };\r\n  \r\n//     applyFilters();\r\n//   }, [data, filtrageValue, filtrageItem, startDate, endDate]); // Inclure startDate et endDate comme dépendances\r\n  \r\n  \r\n//   const handleItemsPerPageChange = (e) => {\r\n//     setItemsPerPage(parseInt(e.target.value)); // Convertir la valeur en nombre entier\r\n//   };  \r\n\r\n//   const renderInputOrSelect = () => {\r\n\r\n//     if (filtrageItem === 'Payée/Impayée :') {\r\n//       return (\r\n//         <select\r\n//           id=\"payeeOrImpayeeSelect\"\r\n//           className=\"form-control\"\r\n//           value={payeeOrImpayee}\r\n//           onChange={handleEtatPayementChange}\r\n//         >\r\n//           <option value=\"\" disabled>[Choisir]</option>\r\n//           <option value=\"PAYEE\">Payée</option>\r\n//           <option value=\"IMPAYEE\">Impayée</option>\r\n//         </select>\r\n//       );\r\n//     } else if(filtrageItem === 'Nom Client :'){\r\n//       return (\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"form-control\"\r\n//           id=\"textInput\"\r\n//           placeholder=\"Enter value\"\r\n//           disabled={filtrageItem === 'Valeur :'}\r\n//           onChange={handleNomClientChange}\r\n//         />\r\n//       );\r\n//     }\r\n\r\n//     else{\r\n//       return (\r\n//         <input\r\n//           type=\"text\"\r\n//           className=\"form-control\"\r\n//           id=\"textInput\"\r\n//           placeholder=\"Enter value\"\r\n//           disabled={filtrageItem === 'Valeur :'}\r\n//           onChange={handleNumeroFactureChange}\r\n//         />\r\n//       );\r\n//     }\r\n//   };\r\n  \r\n//   const filterByDate = () => {\r\n//     if (!startDate || !endDate) return; // Assurez-vous que les deux dates sont définies\r\n  \r\n//     const start = new Date(startDate);\r\n//     const end = new Date(endDate);\r\n//     end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\r\n  \r\n//     const filtered = data.filter(item => {\r\n//       const itemDate = new Date(item.DateFacture);\r\n//       return itemDate >= start && itemDate <= end;\r\n//     });\r\n  \r\n//     setDisplayData(filtered);\r\n//   };  \r\n\r\n//   const handleStartDateChange = (e) => {\r\n//     setStartDate(e.target.value);\r\n//     // Logique supplémentaire si nécessaire\r\n//   };\r\n\r\n//   const handleEndDateChange = (e) => {\r\n//     setEndDate(e.target.value);\r\n//     filterByDate();\r\n//     // Logique supplémentaire si nécessaire\r\n//   };\r\n\r\n//   const resetDates = (e) => {\r\n//     e.preventDefault();\r\n//     setStartDate(null);\r\n//     setEndDate(null);\r\n//     setDisplayData(data); // Reafficher toutes les données puisque les filtres de dates sont enlevés\r\n//   };\r\n\r\n//   if (loading) return <p>Loading...</p>;\r\n//   if (error) return <p>Error: {error}</p>;\r\n//   return (\r\n//     <div className=\"Visualiser\">\r\n//       <center>\r\n//         <h2>Visualiser Facture</h2>\r\n//       </center>\r\n//       <div className=\"form-group\">\r\n//         <label htmlFor=\"selectOption\">Element de Filtrage:</label>\r\n//         <select\r\n//           id=\"selectOption\"\r\n//           className=\"form-control\"\r\n//           onChange={(e) => handleChangefiltrage(e)}\r\n//         >\r\n//           <option value=\"Valeur :\">[ Toutes les Factures ]</option>\r\n//           <option value=\"Nº de Facture :\">Nº de Facture</option>\r\n//           <option value=\"Nom Client :\">Nom Client</option>\r\n//           <option value=\"Payée/Impayée :\">Payée/Impayée</option>\r\n//         </select>\r\n\r\n//         <label htmlFor=\"textInput\">{filtrageItem}</label>\r\n//         {renderInputOrSelect()}\r\n//         <select\r\n//           id=\"itemsPerPageSelect\"\r\n//           onChange={(e) => handleItemsPerPageChange(e)}\r\n//           title=\"Nombre de colonnes\"\r\n//         >\r\n//           <option value=\"5\">5</option>\r\n//           <option value=\"10\">10</option>\r\n//           <option value=\"15\">15</option>\r\n//           <option value=\"20\">20</option>\r\n//         </select>\r\n//       </div>\r\n//       <div className=\"date-filters\">\r\n//           <label htmlFor=\"startDate\">Date de Facture De :</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             id=\"startDate\"\r\n//             className=\"form-control\"\r\n//             value={startDate || ''} // S'assure que la valeur est toujours une chaîne valide\r\n//             onChange={(e) => handleStartDateChange(e)}\r\n//           />\r\n\r\n//           <label htmlFor=\"endDate\">À :</label>\r\n//           <input\r\n//             type=\"date\"\r\n//             id=\"endDate\"\r\n//             className=\"form-control\"\r\n//             value={endDate || ''} // S'assure que la valeur est toujours une chaîne valide\r\n//             onChange={(e) => handleEndDateChange(e)}\r\n//           />\r\n\r\n//           <div onClick={resetDates} className='resetDateBtn' title='Actualiser les dates'>\r\n//             <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.3em\" height=\"1.3em\" viewBox=\"0 0 21 21\"><g fill=\"none\" fillRule=\"evenodd\" stroke=\"#ffff\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3.578 6.487A8 8 0 1 1 2.5 10.5\"></path><path d=\"M7.5 6.5h-4v-4\"></path></g></svg>\r\n//           </div>\r\n//         </div>\r\n//       <Table data={displayData} itemsPerPage={itemsPerPage} />\r\n//     </div>\r\n//   );\r\n// };\r\n  \r\n// export default Visualiser;\r\n\r\n\r\nimport React,{useState,useEffect} from 'react';\r\nimport Table from './Table';\r\nimport axios from '../router/axiosInstance';\r\nimport { getToken } from '../router/auth';\r\nimport '../../css/Visualiser.css'\r\n\r\n\r\nconst Visualiser = () => {\r\n  const [filtrageItem, setItemFiltrage] = useState('Valeur :');\r\n  const [itemsPerPage, setItemsPerPage] = useState(5); \r\n  const [payeeOrImpayee, setPayeeOrImpayee] = useState('');\r\n  const [startDate, setStartDate] = useState('');\r\n  const [endDate, setEndDate] = useState('');\r\n  const [filtrageValue, setFiltrageValue] = useState('');\r\n  const [data, setData] = useState([]);\r\n  const [displayData, setDisplayData] = useState([]); // Add this line for derived data used for displaying\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const [role, setRole] = useState(null); \r\n\r\n\r\n  const [userCanDelete, setUserCanDelete] = useState(true);\r\n\r\n\r\n  \r\n  useEffect(() => {\r\n    const fetchUser = async () => {\r\n      try {\r\n        const token = getToken();\r\n\r\n        if (token) {\r\n          const response = await axios.get('http://localhost:8000/api/user', {\r\n          });\r\n          setRole(response.data.role);\r\n        }\r\n      } catch (error) {\r\n        setError(error);\r\n      }\r\n    };\r\n\r\n    fetchUser();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (role === 'Super Admin' || role === 'Admin') {\r\n      setUserCanDelete(true);\r\n    } else if (role === 'Utilisateur') {\r\n      setUserCanDelete(false);\r\n    } else {\r\n      console.error('Unknown role');\r\n    }\r\n  }, [role]);\r\n\r\n\r\n  useEffect(() => {\r\n    try {\r\n      axios.get('http://localhost:8000/api/getFacture')\r\n        .then(response => {\r\n          setData(response.data.donnees);\r\n          setDisplayData(response.data.donnees);\r\n        });\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n    }\r\n  }, []);\r\n\r\n  console.log(data)\r\n  const handleChangefiltrage=(e)=>{\r\n    e.preventDefault();\r\n    setItemFiltrage(e.target.value);\r\n  }\r\n\r\n  const handleNumeroFactureChange = (e) => {\r\n    const inputNum = e.target.value;\r\n    setFiltrageValue(inputNum);\r\n  \r\n    if (inputNum.trim()) {  // Ensure input is not just white space\r\n      const filteredData = data.filter(item => String(item.NumFacture) === inputNum.trim());\r\n      setDisplayData(filteredData);  // Always set the filtered data, even if empty\r\n    } else {\r\n      setDisplayData(data);  // If no input, show all data\r\n    }\r\n  };\r\n\r\n  const handleNomClientChange = (e) => {\r\n    const inputNom = e.target.value.toUpperCase();\r\n    setFiltrageValue(inputNom);\r\n  \r\n    if (inputNom.trim()) {  // Ensure input is not just white space\r\n      const filteredData = data.filter(item => String(item.client.NomClient) === inputNom.trim());\r\n      setDisplayData(filteredData);  // Always set the filtered data, even if empty\r\n    } else {\r\n      setDisplayData(data);  // If no input, show all data\r\n    }\r\n  };\r\n\r\n  const handleEtatPayementChange = (e) => {\r\n    const inputEtatPayment = e.target.value.toUpperCase();\r\n    setPayeeOrImpayee(inputEtatPayment);\r\n    console.log(inputEtatPayment);\r\n    setFiltrageValue(inputEtatPayment);\r\n\r\n  \r\n    if (inputEtatPayment.trim()) {  // Ensure input is not just white space\r\n      const filteredData = data.filter(item => String(item.EtaPayement) === inputEtatPayment.trim());\r\n      setDisplayData(filteredData);  // Always set the filtered data, even if empty\r\n    } else {\r\n      setDisplayData(data);  // If no input, show all data\r\n      console.log('failed')\r\n    }\r\n  };\r\n  \r\n  console.log('dataToDisplay',displayData);\r\n  useEffect(() => {\r\n    const applyFilters = () => {\r\n      let filtered = data; // Commencez avec l'ensemble complet des données\r\n  \r\n      // Application des filtres textuels\r\n      if (filtrageValue) {\r\n        switch (filtrageItem) {\r\n          case 'Nº de Facture :':\r\n            filtered = filtered.filter(item => String(item.NumFacture) === filtrageValue.trim());\r\n            break;\r\n          case 'Nom Client :':\r\n            filtered = filtered.filter(item => String(item.client.NomClient).toUpperCase() === filtrageValue.trim());\r\n            break;\r\n          case 'Payée/Impayée :':\r\n            filtered = filtered.filter(item => String(item.EtaPayement).toUpperCase() === filtrageValue.trim());\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      }\r\n  \r\n      // Filtre de date\r\n      if (startDate && endDate) {\r\n        const start = new Date(startDate);\r\n        const end = new Date(endDate);\r\n        end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\r\n        filtered = filtered.filter(item => {\r\n          const itemDate = new Date(item.DateFacture);\r\n          return itemDate >= start && itemDate <= end;\r\n        });\r\n      }\r\n  \r\n      setDisplayData(filtered);\r\n    };\r\n  \r\n    applyFilters();\r\n  }, [data, filtrageValue, filtrageItem, startDate, endDate]); // Inclure startDate et endDate comme dépendances\r\n  \r\n  \r\n  const handleItemsPerPageChange = (e) => {\r\n    setItemsPerPage(parseInt(e.target.value)); // Convertir la valeur en nombre entier\r\n  };  \r\n\r\n  const renderInputOrSelect = () => {\r\n\r\n    if (filtrageItem === 'Payée/Impayée :') {\r\n      return (\r\n        <select\r\n          id=\"payeeOrImpayeeSelect\"\r\n          className=\"form-control\"\r\n          value={payeeOrImpayee}\r\n          onChange={handleEtatPayementChange}\r\n        >\r\n          <option value=\"\" disabled>[Choisir]</option>\r\n          <option value=\"PAYEE\">Payée</option>\r\n          <option value=\"IMPAYEE\">Impayée</option>\r\n        </select>\r\n      );\r\n    } else if(filtrageItem === 'Nom Client :'){\r\n      return (\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"textInput\"\r\n          placeholder=\"Enter value\"\r\n          disabled={filtrageItem === 'Valeur :'}\r\n          onChange={handleNomClientChange}\r\n        />\r\n      );\r\n    }\r\n\r\n    else{\r\n      return (\r\n        <input\r\n          type=\"text\"\r\n          className=\"form-control\"\r\n          id=\"textInput\"\r\n          placeholder=\"Enter value\"\r\n          disabled={filtrageItem === 'Valeur :'}\r\n          onChange={handleNumeroFactureChange}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  \r\n  const filterByDate = () => {\r\n    if (!startDate || !endDate) return; // Assurez-vous que les deux dates sont définies\r\n  \r\n    const start = new Date(startDate);\r\n    const end = new Date(endDate);\r\n    end.setHours(23, 59, 59, 999); // Inclut tout le jour de la date de fin\r\n  \r\n    const filtered = data.filter(item => {\r\n      const itemDate = new Date(item.DateFacture);\r\n      return itemDate >= start && itemDate <= end;\r\n    });\r\n  \r\n    setDisplayData(filtered);\r\n  };  \r\n\r\n  const handleStartDateChange = (e) => {\r\n    setStartDate(e.target.value);\r\n    // Logique supplémentaire si nécessaire\r\n  };\r\n\r\n  const handleEndDateChange = (e) => {\r\n    setEndDate(e.target.value);\r\n    filterByDate();\r\n    // Logique supplémentaire si nécessaire\r\n  };\r\n\r\n  const resetDates = (e) => {\r\n    e.preventDefault();\r\n    setStartDate(null);\r\n    setEndDate(null);\r\n    setDisplayData(data); // Reafficher toutes les données puisque les filtres de dates sont enlevés\r\n  };\r\n\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error: {error}</p>;\r\n  return (\r\n    <div className=\"Visualiser\">\r\n      <center>\r\n        <h2>Visualiser Facture</h2>\r\n      </center>\r\n      <div className=\"form-group\">\r\n        <label htmlFor=\"selectOption\">Element de Filtrage:</label>\r\n        <select\r\n          id=\"selectOption\"\r\n          className=\"form-control\"\r\n          onChange={(e) => handleChangefiltrage(e)}\r\n        >\r\n          <option value=\"Valeur :\">[ Toutes les Factures ]</option>\r\n          <option value=\"Nº de Facture :\">Nº de Facture</option>\r\n          <option value=\"Nom Client :\">Nom Client</option>\r\n          <option value=\"Payée/Impayée :\">Payée/Impayée</option>\r\n        </select>\r\n\r\n        <label htmlFor=\"textInput\">{filtrageItem}</label>\r\n        {renderInputOrSelect()}\r\n        <select\r\n          id=\"itemsPerPageSelect\"\r\n          onChange={(e) => handleItemsPerPageChange(e)}\r\n          title=\"Nombre de colonnes\"\r\n        >\r\n          <option value=\"5\">5</option>\r\n          <option value=\"10\">10</option>\r\n          <option value=\"15\">15</option>\r\n          <option value=\"20\">20</option>\r\n        </select>\r\n      </div>\r\n      <div className=\"date-filters\">\r\n          <label htmlFor=\"startDate\">Date de Facture De :</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"startDate\"\r\n            className=\"form-control\"\r\n            value={startDate || ''} // S'assure que la valeur est toujours une chaîne valide\r\n            onChange={(e) => handleStartDateChange(e)}\r\n          />\r\n\r\n          <label htmlFor=\"endDate\">À :</label>\r\n          <input\r\n            type=\"date\"\r\n            id=\"endDate\"\r\n            className=\"form-control\"\r\n            value={endDate || ''} // S'assure que la valeur est toujours une chaîne valide\r\n            onChange={(e) => handleEndDateChange(e)}\r\n          />\r\n\r\n          <div onClick={resetDates} className='resetDateBtn' title='Actualiser les dates'>\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"1.3em\" height=\"1.3em\" viewBox=\"0 0 21 21\"><g fill=\"none\" fillRule=\"evenodd\" stroke=\"#ffff\" strokeLinecap=\"round\" strokeLinejoin=\"round\"><path d=\"M3.578 6.487A8 8 0 1 1 2.5 10.5\"></path><path d=\"M7.5 6.5h-4v-4\"></path></g></svg>\r\n          </div>\r\n        </div>\r\n      <Table data={displayData} itemsPerPage={itemsPerPage} />\r\n    </div>\r\n  );\r\n};\r\n  \r\nexport default Visualiser;\r\n"],"mappings":";;AAAA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAIA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;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"},"metadata":{},"sourceType":"module","externalDependencies":[]}